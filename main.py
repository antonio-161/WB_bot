import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram import exceptions
from aiogram.types import BotCommand
from config import settings
from services.db import DB, ProductRow
from services.price_fetcher import PriceFetcher
from handlers import (
    plan as plan_h,
    start as start_h,
    products as products_h,
    settings as settings_h,
    region as region_h
)
from decimal import Decimal
from utils.wb_utils import apply_wallet_discount
from constants import DEFAULT_DEST

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class Container:
    """–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    def __init__(self, db: DB, price_fetcher: PriceFetcher):
        self.db = db
        self.price_fetcher = price_fetcher


async def monitor_loop(container: Container, bot: Bot):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤."""
    poll = settings.POLL_INTERVAL_SECONDS
    hourly_metrics = {"processed": 0, "errors": 0, "notifications": 0}
    cycles = 0
    report_every = max(1, 3600 // poll)

    async def process_product(p: ProductRow, metrics: dict):
        try:
            user = await container.db.get_user(p.user_id)
            dest = user.get("dest", DEFAULT_DEST) if user else DEFAULT_DEST

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ (—Ü–µ–Ω—ã + –æ—Å—Ç–∞—Ç–∫–∏ + —Ä–∞–∑–º–µ—Ä—ã)
            new_data = await container.price_fetcher.get_product_data(p.nm_id, dest=dest)
            if not new_data:
                metrics["errors"] += 1
                logger.warning(f"[nm={p.nm_id}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ")
                return

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä—ã
            sizes = new_data.get("sizes", [])
            if sizes:
                selected_size = p.selected_size
                if not selected_size:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª —Ä–∞–∑–º–µ—Ä ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                    logger.info(f"[nm={p.nm_id}] –†–∞–∑–º–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø—Ä–æ–ø—É—Å–∫")
                    return

                # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                size_data = next((s for s in sizes if s.get("name") == selected_size), None)
                if not size_data:
                    metrics["errors"] += 1
                    logger.warning(f"[nm={p.nm_id}] –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä '{selected_size}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                price_info = size_data.get("price", {})
                stocks = size_data.get("stocks", [])
            else:
                # –¢–æ–≤–∞—Ä –±–µ–∑ —Ä–∞–∑–º–µ—Ä–æ–≤
                price_info = new_data.get("price", {})
                stocks = new_data.get("stocks", [])

            new_basic = Decimal(str(price_info.get("basic", 0)))
            new_prod = Decimal(str(price_info.get("product", 0)))
            qty_total = sum(stock.get("qty", 0) for stock in stocks)
            out_of_stock = qty_total == 0

            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if p.name_product == "–ó–∞–≥—Ä—É–∑–∫–∞..." and new_data.get("name"):
                await container.db.update_product_name(p.id, new_data["name"])

            old_prod = p.last_product_price
            old_qty = getattr(p, "last_qty", None)
            notify_price = old_prod is not None and new_prod < old_prod
            notify_stock = old_qty is not None and old_qty > 0 and out_of_stock

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—ã –∏ –æ—Å—Ç–∞—Ç–∫–∏
            await container.db.update_prices_and_stock(
                p.id, new_basic, new_prod, qty_total, out_of_stock
            )
            metrics["processed"] += 1

            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            msg = ""
            if notify_price:
                discount = user.get("discount_percent", 0) if user else 0
                price_no_wallet = float(new_prod)
                price_with_wallet = apply_wallet_discount(price_no_wallet, discount)
                old_price = float(old_prod)
                diff = old_price - price_no_wallet
                diff_percent = (diff / old_price) * 100

                msg += (
                    f"üîî <b>–¶–µ–Ω–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å!</b>\n\n"
                    f"üì¶ {p.name_product}\n"
                    f"üîó <a href='{p.url_product}'>–û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä</a>\n\n"
                    f"üí∞ <b>–ù–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {price_no_wallet:.2f} ‚ÇΩ\n"
                )
                if discount > 0:
                    msg += f"üí≥ <b>–° WB –∫–æ—à–µ–ª—å–∫–æ–º ({discount}%):</b> {price_with_wallet:.2f} ‚ÇΩ\n"
                msg += (
                    f"üìâ <b>–ë—ã–ª–æ:</b> {old_price:.2f} ‚ÇΩ\n"
                    f"‚úÖ <b>–≠–∫–æ–Ω–æ–º–∏—è:</b> {diff:.2f} ‚ÇΩ ({diff_percent:.1f}%)\n"
                )

            if notify_stock:
                msg += (
                    f"‚ö†Ô∏è <b>–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!</b>\n\n"
                    f"üì¶ {p.name_product}\n"
                    f"üîó <a href='{p.url_product}'>–û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä</a>\n"
                )

            if msg:
                try:
                    await bot.send_message(
                        p.user_id,
                        msg,
                        parse_mode="HTML",
                        disable_web_page_preview=True
                    )
                    metrics["notifications"] += 1
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {p.user_id} –ø–æ nm={p.nm_id}")
                except exceptions.TelegramForbiddenError:
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {p.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                except exceptions.TelegramBadRequest as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {p.user_id}: {e}")
                    metrics["errors"] += 1
                except Exception as e:
                    logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                    metrics["errors"] += 1

        except Exception as e:
            logger.exception(f"[nm={p.nm_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞: {e}")
            metrics["errors"] += 1

    while True:
        try:
            logger.info("–ù–∞—á–∏–Ω–∞—é —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            products = await container.db.all_products()
            if not products:
                logger.info("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                await asyncio.sleep(poll)
                continue

            metrics = {"processed": 0, "errors": 0, "notifications": 0}

            batch_size = 50
            for i in range(0, len(products), batch_size):
                batch = products[i:i + batch_size]
                tasks = [asyncio.create_task(process_product(p, metrics)) for p in batch]
                await asyncio.gather(*tasks, return_exceptions=True)
                if i + batch_size < len(products):
                    await asyncio.sleep(5)

            for k in metrics:
                hourly_metrics[k] += metrics[k]
            cycles += 1

            logger.info(
                f"–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ={metrics['processed']}, "
                f"–æ—à–∏–±–æ–∫={metrics['errors']}, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π={metrics['notifications']}"
            )

            if cycles >= report_every:
                report = (
                    "üìä <b>–û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å</b>\n\n"
                    f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {hourly_metrics['processed']}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {hourly_metrics['errors']}\n"
                    f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {hourly_metrics['notifications']}\n\n"
                    f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {poll} —Å–µ–∫"
                )
                try:
                    await bot.send_message(settings.ADMIN_CHAT_ID, report, parse_mode="HTML")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É: {e}")
                hourly_metrics = {"processed": 0, "errors": 0, "notifications": 0}
                cycles = 0

            await asyncio.sleep(poll)

        except Exception as e:
            logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ monitor_loop: {e}")
            await asyncio.sleep(poll)


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã
    bot = Bot(token=settings.BOT_TOKEN)
    dp = Dispatcher()

    db = DB(str(settings.DATABASE_DSN))
    await db.connect()
    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    fetcher = PriceFetcher()
    container = Container(db=db, price_fetcher=fetcher)

    # –î–æ–±–∞–≤–ª—è–µ–º routers
    dp.include_router(start_h.router)
    dp.include_router(plan_h.router)
    dp.include_router(products_h.router)
    dp.include_router(settings_h.router)
    dp.include_router(region_h.router)

    # Dependency injection –¥–ª—è handlers
    dp["db"] = db
    dp["price_fetcher"] = fetcher

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –≤ —Ñ–æ–Ω–µ
    monitor_task = asyncio.create_task(monitor_loop(container, bot))
    logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä —Ü–µ–Ω –∑–∞–ø—É—â–µ–Ω")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await bot.set_my_commands([
        BotCommand(command="start", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    ])
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    try:
        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        await dp.start_polling(
            bot, allowed_updates=["message", "callback_query"]
        )
    except KeyboardInterrupt:
        logger.info("‚õî –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        monitor_task.cancel()
        try:
            await monitor_task
        except asyncio.CancelledError:
            pass
        
        await db.close()
        await bot.session.close()
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ Ctrl+C")
