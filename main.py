import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram import exceptions
from aiogram.types import BotCommand
from config import settings
from services.db import DB
from services.price_fetcher import PriceFetcher
from handlers import (
    plan as plan_h,
    start as start_h,
    products as products_h,
    settings as settings_h
)
from decimal import Decimal
from utils.wb_utils import apply_wallet_discount
from constants import DEFAULT_DEST

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# Dependency injection container (simple)
class Container:
    """–ö–æ–Ω—Ç–µ–∏ÃÜ–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    def __init__(self, db: DB, price_fetcher: PriceFetcher):
        self.db = db
        self.price_fetcher = price_fetcher


async def monitor_loop(container: Container, bot: Bot):
    poll = settings.POLL_INTERVAL_SECONDS

    # –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞ —á–∞—Å
    hourly_metrics = {"processed": 0, "errors": 0, "notifications": 0}
    cycles = 0
    report_every = 3600 // poll  # —Å–∫–æ–ª—å–∫–æ —Ü–∏–∫–ª–æ–≤ –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ —á–∞—Å

    async def process_product(p, metrics):
        try:
            user = await container.db.get_user(p.user_id)
            dest = user.get("dest", DEFAULT_DEST) if user else DEFAULT_DEST

            new = await container.price_fetcher.get_price(p.nm_id, dest=dest)
            if not new:
                metrics["errors"] += 1
                return

            old_prod = p.last_product_price
            new_prod = Decimal(str(new["product"]))
            new_basic = Decimal(str(new["basic"]))

            notify = old_prod is not None and new_prod < old_prod

            await container.db.update_prices(p.id, new_basic, new_prod)
            metrics["processed"] += 1

            if notify and user:
                discount = user.get("discount_percent", 0)
                price_no_wallet = float(new_prod)
                price_with_wallet = apply_wallet_discount(
                    price_no_wallet, discount
                )

                msg = (
                    f"–¶–µ–Ω–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å –¥–ª—è —Ç–æ–≤–∞—Ä–∞ {p.name}!\n"
                    f"–°—Å—ã–ª–∫–∞: {p.url}\n"
                    f"–¶–µ–Ω–∞ –±–µ–∑ WB –∫–æ—à–µ–ª—å–∫–∞: {price_no_wallet:.2f} ‚ÇΩ\n"
                    f"–¶–µ–Ω–∞ —Å WB –∫–æ—à–µ–ª—å–∫–æ–º ({discount}%): {price_with_wallet:.2f} ‚ÇΩ\n"
                    f"–†–∞–Ω—å—à–µ: {float(old_prod):.2f} ‚ÇΩ ‚Üí –°–µ–π—á–∞—Å: {price_no_wallet:.2f} ‚ÇΩ"
                )

                try:
                    await bot.send_message(p.user_id, msg)
                    metrics["notifications"] += 1
                except exceptions.TelegramBadRequest:
                    logger.warning(
                        "–ù–µ —Å–º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s",
                        p.user_id
                    )
                    metrics["errors"] += 1

        except Exception as e:
            logger.exception(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞ nm=%s: %s", p.nm_id, e
            )
            metrics["errors"] += 1

    while True:
        try:
            products = await container.db.all_products()

            metrics = {"processed": 0, "errors": 0, "notifications": 0}
            tasks = [
                asyncio.create_task(process_product(p, metrics)) for p in products
                ]
            if tasks:
                await asyncio.gather(*tasks)

            # –æ–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            for k in metrics:
                hourly_metrics[k] += metrics[k]

            cycles += 1

            # –ª–æ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Ü–∏–∫–ª–∞
            logger.info(
                "–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ=%s, –æ—à–∏–±–æ–∫=%s, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π=%s",
                metrics["processed"],
                metrics["errors"],
                metrics["notifications"]
            )

            # —Ä–∞–∑ –≤ —á–∞—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É
            if cycles >= report_every:
                report = (
                    "üìä –û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:\n"
                    f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {hourly_metrics['processed']}\n"
                    f"–û—à–∏–±–æ–∫: {hourly_metrics['errors']}\n"
                    f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {hourly_metrics['notifications']}"
                )
                try:
                    await bot.send_message(settings.ADMIN_CHAT_ID, report)
                except Exception as e:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É: %s", e)

                # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫–∏
                hourly_metrics = {
                    "processed": 0,
                    "errors": 0,
                    "notifications": 0
                    }
                cycles = 0

            await asyncio.sleep(poll)

        except Exception:
            logger.exception("–û—à–∏–±–∫–∞ –≤ monitor_loop, –∂–¥—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞—é.")
            await asyncio.sleep(poll)


async def main():
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã
    bot = Bot(token=settings.BOT_TOKEN, parse_mode="HTML")
    dp = Dispatcher()

    db = DB(settings.DATABASE_DSN)
    await db.connect()

    fetcher = PriceFetcher()
    container = Container(db=db, price_fetcher=fetcher)

    # –î–æ–±–∞–≤–ª—è–µ–º routers
    dp.include_router(plan_h.router)
    dp.include_router(start_h.router)
    dp.include_router(products_h.router)
    dp.include_router(settings_h.router)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –≤ —Ñ–æ–Ω–µ
    loop = asyncio.get_event_loop()
    loop.create_task(monitor_loop(container, bot))

    dp["db"] = db
    dp["price_fetcher"] = fetcher

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥
    await bot.set_my_commands([
        BotCommand(command="start", description="–°—Ç–∞—Ä—Ç"),
        BotCommand(command="add", description="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"),
        BotCommand(command="list", description="–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö"),
        BotCommand(command="setdiscount", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∏–¥–∫—É WB"),
        BotCommand(command="remove", description="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä"),
    ])

    try:
        await dp.start_polling(bot)
    finally:
        await db.close()
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
