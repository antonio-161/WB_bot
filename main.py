import asyncio
from datetime import datetime, timedelta
import logging
from typing import Callable, Dict, Any, Awaitable
from aiogram import Bot, BaseMiddleware, Dispatcher
from aiogram import exceptions
from aiogram.types import BotCommand
from config import settings
from services.container import Container
from services.db import DB
from services.price_fetcher import PriceFetcher
from handlers import (
    plan as plan_h,
    start as start_h,
    products as products_h,
    settings as settings_h,
    region as region_h,
    stats as stats_h,
    onboarding as onboarding_h,
    admin as admin_h
)
from utils.error_tracker import get_error_tracker
from utils.health_monitor import get_health_monitor, HealthStatus
from utils.rate_limiter import RateLimitMiddleware
from utils.wb_utils import apply_wallet_discount
from constants import DEFAULT_DEST
from models import ProductRow

logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class DependencyInjectionMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—ä–µ–∫—Ü–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –≤ handlers.
    
    –ó–∞—á–µ–º: Handlers –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –Ω—É–∂–Ω—ã–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.
    """
    
    def __init__(self, container: Container):
        super().__init__()
        self.container = container
    
    async def __call__(
        self,
        handler: Callable[[Any, Dict[str, Any]], Awaitable[Any]],
        event: Any,
        data: Dict[str, Any]
    ) -> Any:
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –≤ data (–æ–Ω–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ handlers)
        data["user_repo"] = self.container.get_user_repo()
        data["product_repo"] = self.container.get_product_repo()
        data["price_history_repo"] = self.container.get_price_history_repo()
        
        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∞–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (–¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥—Ä—É–≥–∏–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º)
        data["container"] = self.container
        
        # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–ø–æ–∫–∞ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ—Ç–µ handlers)
        data["db"] = self.container.db
        data["price_fetcher"] = self.container.price_fetcher
        
        return await handler(event, data)


async def monitor_loop(container: Container, bot: Bot):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤."""
    poll = settings.POLL_INTERVAL_SECONDS
    hourly_metrics = {"processed": 0, "errors": 0, "notifications": 0}
    cycles = 0
    report_every = max(1, 3600 // poll)
    error_tracker = get_error_tracker()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤ –∞–¥–º–∏–Ω—É
    async def send_alert_to_admin(alert_data: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""
        try:
            await bot.send_message(
                settings.ADMIN_CHAT_ID,
                alert_data['message'],
                parse_mode="HTML"
            )
            logger.info(f"Alert sent to admin: {alert_data['severity']}")
        except Exception as e:
            logger.exception(f"Failed to send alert to admin: {e}")

    error_tracker.register_alert_callback(send_alert_to_admin)

    async def process_product(p: ProductRow, metrics: dict[str, int]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä."""
        try:
            user = await container.db.get_user(p.user_id)
            dest = user.get("dest", DEFAULT_DEST) if user else DEFAULT_DEST

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ (—Ü–µ–Ω—ã + –æ—Å—Ç–∞—Ç–∫–∏ + —Ä–∞–∑–º–µ—Ä—ã)
            new_data = await container.price_fetcher.get_product_data(p.nm_id, dest=dest)
            if not new_data:
                metrics["errors"] += 1
                logger.warning(f"[nm={p.nm_id}] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ")
                return

            sizes = new_data.get("sizes", [])

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä S, M, XL)
            has_real_sizes = any(s.get("name") not in ("", "0", None) for s in sizes)

            # --- –¢–û–í–ê–† –° –†–ê–ó–ú–ï–†–ê–ú–ò ---
            if has_real_sizes:
                selected_size = p.selected_size
                if not selected_size:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª —Ä–∞–∑–º–µ—Ä ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                    logger.info(f"[nm={p.nm_id}] –†–∞–∑–º–µ—Ä –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø—Ä–æ–ø—É—Å–∫ (–æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º)")
                    return

                # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                size_data = next((s for s in sizes if s.get("name") == selected_size), None)
                if not size_data:
                    metrics["errors"] += 1
                    logger.warning(f"[nm={p.nm_id}] –í—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä '{selected_size}' –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ {len(sizes)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
                    return

                price_info = size_data.get("price", {})
                stocks = size_data.get("stocks", [])

            # --- –¢–û–í–ê–† –ë–ï–ó –†–ï–ê–õ–¨–ù–´–• –†–ê–ó–ú–ï–†–û–í ---
            else:

                size_data = sizes[0] if sizes else {}
                price_info = size_data.get("price", new_data.get("price", {}))
                stocks = size_data.get("stocks", new_data.get("stocks", []))

                if not price_info:
                    metrics["errors"] += 1
                    logger.warning(f"[nm={p.nm_id}] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ (—Ç–æ–≤–∞—Ä –±–µ–∑ —Ä–∞–∑–º–µ—Ä–æ–≤)")
                    return

            # --- –û–ë–©–ò–ï –î–ê–ù–ù–´–ï ---
            new_basic = price_info.get("basic", 0)
            new_prod = price_info.get("product", 0)
            qty_total = sum(stock.get("qty", 0) for stock in stocks)
            out_of_stock = qty_total == 0

            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if p.name_product == "–ó–∞–≥—Ä—É–∑–∫–∞..." and new_data.get("name"):
                await container.db.update_product_name(p.id, new_data["name"])

            old_prod = p.last_product_price
            old_qty = getattr(p, "last_qty", None)

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
            notify_price = False
            if old_prod is not None and new_prod < old_prod:
                if p.notify_mode == "percent":
                    percent_drop = ((old_prod - new_prod) / old_prod) * 100
                    notify_price = percent_drop >= p.notify_value
                elif p.notify_mode == "threshold":
                    notify_price = new_prod <= p.notify_value
                else:
                    notify_price = True

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∞–ª–∏—á–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è basic/pro)
            user_plan = user.get("plan", "plan_free") if user else "plan_free"
            notify_stock_out = False
            notify_stock_in = False

            if user_plan in ["plan_basic", "plan_pro"]:
                # –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
                if old_qty is not None and old_qty > 0 and out_of_stock:
                    notify_stock_out = True
                
                # –¢–æ–≤–∞—Ä –ø–æ—è–≤–∏–ª—Å—è
                if old_qty is not None and old_qty == 0 and not out_of_stock and qty_total > 0:
                    notify_stock_in = True

            # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ ---
            await container.db.update_prices_and_stock(
                p.id, new_basic, new_prod, qty_total, out_of_stock
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã
            if old_prod is None or new_prod != old_prod:
                await container.db.add_price_history(p.id, new_basic, new_prod, qty_total)

            metrics["processed"] += 1

            # --- –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
            msg = ""
            if notify_price:
                discount = user.get("discount_percent", 0) if user else 0
                
                # –†–∞—Å—á—ë—Ç —Ü–µ–Ω —Å —É—á—ë—Ç–æ–º —Å–∫–∏–¥–∫–∏
                old_price_display = old_prod
                new_price_display = new_prod
                
                if discount > 0:
                    old_price_display = apply_wallet_discount(old_prod, discount)
                    new_price_display = apply_wallet_discount(new_prod, discount)
                
                diff = old_price_display - new_price_display
                diff_percent = (diff / old_price_display) * 100 if old_price_display > 0 else 0

                msg += (
                    f"üîî <b>–¶–µ–Ω–∞ —Å–Ω–∏–∑–∏–ª–∞—Å—å!</b>\n\n"
                    f"üì¶ {p.display_name}\n"
                    f"üîó <a href='{p.url_product}'>–û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä</a>\n\n"
                )
                
                if discount > 0:
                    msg += (
                        f"üí≥ <b>–¶–µ–Ω–∞ —Å WB –∫–æ—à–µ–ª—å–∫–æ–º ({discount}%):</b>\n"
                        f"‚úÖ <b>–°–µ–π—á–∞—Å:</b> {new_price_display} ‚ÇΩ\n"
                        f"üìâ <b>–ë—ã–ª–æ:</b> {old_price_display} ‚ÇΩ\n"
                        f"üí∞ <b>–≠–∫–æ–Ω–æ–º–∏—è:</b> {diff} ‚ÇΩ ({diff_percent:.1f}%)\n\n"
                        f"<i>–ë–µ–∑ –∫–æ—à–µ–ª—å–∫–∞: {new_prod} ‚ÇΩ (–±—ã–ª–æ {old_prod} ‚ÇΩ)</i>\n"
                    )
                else:
                    msg += (
                        f"üí∞ <b>–ù–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {new_price_display} ‚ÇΩ\n"
                        f"üìâ <b>–ë—ã–ª–æ:</b> {old_price_display} ‚ÇΩ\n"
                        f"‚úÖ <b>–≠–∫–æ–Ω–æ–º–∏—è:</b> {diff} ‚ÇΩ ({diff_percent:.1f}%)\n"
                    )

            if notify_stock_out:
                msg += (
                    f"\n‚ö†Ô∏è <b>–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!</b>\n\n"
                    f"üì¶ {p.display_name}\n"
                    f"üîó <a href='{p.url_product}'>–û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä</a>\n"
                )

            if notify_stock_in:
                msg += (
                    f"\n‚úÖ <b>–¢–æ–≤–∞—Ä —Å–Ω–æ–≤–∞ –≤ –Ω–∞–ª–∏—á–∏–∏!</b>\n\n"
                    f"üì¶ {p.display_name}\n"
                    f"üîó <a href='{p.url_product}'>–û—Ç–∫—Ä—ã—Ç—å —Ç–æ–≤–∞—Ä</a>\n"
                )

                if user_plan == "plan_pro" and qty_total:
                    msg += f"üì¶ <b>–û—Å—Ç–∞—Ç–æ–∫:</b> {qty_total} —à—Ç.\n"

            if msg:
                try:
                    await bot.send_message(
                        p.user_id,
                        msg,
                        parse_mode="HTML",
                        disable_web_page_preview=True
                    )
                    metrics["notifications"] += 1
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {p.user_id} –ø–æ nm={p.nm_id}")
                except exceptions.TelegramForbiddenError:
                    logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {p.user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                except exceptions.TelegramBadRequest as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {p.user_id}: {e}")
                    metrics["errors"] += 1
                except Exception as e:
                    logger.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                    metrics["errors"] += 1

        except Exception as e:
            logger.exception(f"[nm={p.nm_id}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞: {e}")
            metrics["errors"] += 1

    while True:
        try:
            logger.info("–ù–∞—á–∏–Ω–∞—é —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
            products = await container.db.all_products()
            logger.info(f"üìä –¢–æ–≤–∞—Ä–æ–≤ –≤ –ë–î: {len(products)}")
            if not products:
                logger.info("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
                await asyncio.sleep(poll)
                continue

            metrics = {"processed": 0, "errors": 0, "notifications": 0}

            batch_size = 50
            for i in range(0, len(products), batch_size):
                batch = products[i:i + batch_size]
                tasks = [asyncio.create_task(process_product(p, metrics)) for p in batch]
                await asyncio.gather(*tasks, return_exceptions=True)
                if i + batch_size < len(products):
                    await asyncio.sleep(5)

            for k in metrics:
                hourly_metrics[k] += metrics[k]
            cycles += 1

            logger.info(
                f"–¶–∏–∫–ª –∑–∞–≤–µ—Ä—à—ë–Ω: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ={metrics['processed']}, "
                f"–æ—à–∏–±–æ–∫={metrics['errors']}, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π={metrics['notifications']}"
            )

            if cycles >= report_every:
                report = (
                    "üìä <b>–û—Ç—á—ë—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å</b>\n\n"
                    f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {hourly_metrics['processed']}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {hourly_metrics['errors']}\n"
                    f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {hourly_metrics['notifications']}\n\n"
                    f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {poll} —Å–µ–∫"
                )
                try:
                    await bot.send_message(settings.ADMIN_CHAT_ID, report, parse_mode="HTML")
                except Exception as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É: {e}")
                hourly_metrics = {"processed": 0, "errors": 0, "notifications": 0}
                cycles = 0

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ü–∏–∫–ª–∞
            await error_tracker.check_and_alert()

            await asyncio.sleep(poll)

        except Exception as e:
            logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ monitor_loop: {e}")
            await asyncio.sleep(poll)


async def cleanup_old_data(container: Container):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    while True:
        try:
            await asyncio.sleep(86400)  # –†–∞–∑ –≤ —Å—É—Ç–∫–∏
            logger.info("–ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            
            # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
            await container.db.cleanup_old_history_by_plan()
            logger.info("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω –æ—á–∏—â–µ–Ω–∞")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
            deleted = await container.db.cleanup_expired_products()
            if deleted > 0:
                logger.info(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ)")
            
            logger.info("–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")


async def auto_backup(container: Container):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –ë–î –∫–∞–∂–¥—É—é –Ω–æ—á—å."""
    while True:
        try:
            # –ñ–¥—ë–º –¥–æ 03:00
            now = datetime.now()
            target = now.replace(hour=3, minute=0, second=0, microsecond=0)
            if now > target:
                target += timedelta(days=1)
            
            wait_seconds = (target - now).total_seconds()
            await asyncio.sleep(wait_seconds)
            
            logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –±—ç–∫–∞–ø —á–µ—Ä–µ–∑ subprocess
            import subprocess
            result = subprocess.run(
                ["bash", "scripts/backup.sh", f"auto_{datetime.now().strftime('%Y%m%d')}"],
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                logger.info("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
                from aiogram import Bot
                bot = Bot(token=settings.BOT_TOKEN)
                await bot.send_message(
                    settings.ADMIN_CHAT_ID,
                    "‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –ë–î –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
                )
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞: {result.stderr}")
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –±—ç–∫–∞–ø–µ: {e}")


async def health_check_loop(container: Container, bot: Bot):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã."""
    monitor = get_health_monitor()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º callback –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
    async def send_health_alert(alert_data: Dict):
        try:
            await bot.send_message(
                settings.ADMIN_CHAT_ID,
                alert_data['message'],
                parse_mode="HTML"
            )
        except Exception as e:
            logger.exception(f"Failed to send health alert: {e}")
    
    monitor.register_alert_callback(send_health_alert)
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            await asyncio.sleep(300)
            
            logger.info("–í—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
            health_data = await monitor.perform_full_check(container.db)
            
            if health_data['overall_status'] != HealthStatus.HEALTHY:
                logger.warning(f"Health check: {health_data['overall_status'].value}")
            else:
                logger.info("Health check: —Å–∏—Å—Ç–µ–º–∞ –∑–¥–æ—Ä–æ–≤–∞")
                
        except Exception as e:
            logger.exception(f"–û—à–∏–±–∫–∞ –≤ health_check_loop: {e}")
            await asyncio.sleep(300)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç—ã
    bot = Bot(token=settings.BOT_TOKEN)
    dp = Dispatcher()

    db = DB(str(settings.DATABASE_DSN))
    await db.connect()
    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

    # –°–æ–∑–¥–∞—ë–º PriceFetcher —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π x-pow
    # –£–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è USE_XPOW (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)
    fetcher = PriceFetcher(use_xpow=settings.USE_XPOW)
    if settings.USE_XPOW:
        logger.info("‚úÖ X-POW —Ç–æ–∫–µ–Ω –≤–∫–ª—é—á—ë–Ω (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤—Å–µ—Ö —Å–∫–ª–∞–¥–∞—Ö)")
    else:
        logger.info("‚ÑπÔ∏è X-POW —Ç–æ–∫–µ–Ω –æ—Ç–∫–ª—é—á—ë–Ω")
    container = Container(db=db, price_fetcher=fetcher)

    # –î–æ–±–∞–≤–ª—è–µ–º routers
    dp.include_router(start_h.router)
    dp.include_router(plan_h.router)
    dp.include_router(products_h.router)
    dp.include_router(settings_h.router)
    dp.include_router(region_h.router)
    dp.include_router(stats_h.router)
    dp.include_router(onboarding_h.router)
    dp.include_router(admin_h.router)

    dp.message.middleware(RateLimitMiddleware(rate_limit=3))
    dp.message.middleware(DependencyInjectionMiddleware(container))
    dp.callback_query.middleware(DependencyInjectionMiddleware(container))

    # Dependency injection –¥–ª—è handlers
    dp["db"] = db
    dp["price_fetcher"] = fetcher

    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –≤ —Ñ–æ–Ω–µ
    monitor_task = asyncio.create_task(monitor_loop(container, bot))
    logger.info("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä —Ü–µ–Ω –∑–∞–ø—É—â–µ–Ω")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    cleanup_task = asyncio.create_task(cleanup_old_data(container))
    logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω–∞")

    health_task = asyncio.create_task(health_check_loop(container, bot))
    logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω–∞")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø
    backup_task = asyncio.create_task(auto_backup(container))
    logger.info("‚úÖ –ó–∞–¥–∞—á–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –±—ç–∫–∞–ø–∞ –∑–∞–ø—É—â–µ–Ω–∞")

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await bot.set_my_commands([
        BotCommand(command="start", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
    ])
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

    try:
        logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        await dp.start_polling(
            bot, allowed_updates=["message", "callback_query"]
        )
    except KeyboardInterrupt:
        logger.info("‚õî –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    finally:
        monitor_task.cancel()
        cleanup_task.cancel()
        backup_task.cancel()
        try:
            await monitor_task
        except asyncio.CancelledError:
            pass
        try:
            await cleanup_task
        except asyncio.CancelledError:
            pass
        try:
            await backup_task
        except asyncio.CancelledError:
            pass
        try:
            await health_task
        except asyncio.CancelledError:
            pass

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º XPowFetcher –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        try:
            from services.xpow_fetcher import close_xpow_fetcher
            await close_xpow_fetcher()
            logger.info("‚úÖ XPowFetcher –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ XPowFetcher: {e}")
        
        await fetcher.close()
        await db.close()
        await bot.session.close()
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ Ctrl+C")
