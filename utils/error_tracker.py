"""
–°–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫ API Wildberries.
"""
import asyncio
import logging
from dataclasses import dataclass
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from collections import deque
from enum import Enum

logger = logging.getLogger(__name__)


class ErrorType(Enum):
    """–¢–∏–ø—ã –æ—à–∏–±–æ–∫ API."""
    HTTP_403 = "403_forbidden"
    HTTP_429 = "429_rate_limit"
    HTTP_5XX = "5xx_server_error"
    TIMEOUT = "timeout"
    CONNECTION = "connection_error"
    PARSE_ERROR = "parse_error"
    UNKNOWN = "unknown"


@dataclass
class ErrorEvent:
    """–°–æ–±—ã—Ç–∏–µ –æ—à–∏–±–∫–∏."""
    timestamp: datetime
    error_type: ErrorType
    nm_id: Optional[int] = None
    details: Optional[str] = None


class ErrorTracker:
    """
    –¢—Ä–µ–∫–µ—Ä –æ—à–∏–±–æ–∫ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∞–ª–µ—Ä—Ç–∞–º–∏.
    
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç:
    - –ß–∞—Å—Ç–æ—Ç—É –æ—à–∏–±–æ–∫ (–æ–±—â—É—é –∏ –ø–æ —Ç–∏–ø–∞–º)
    - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Ä–æ–≥–∏
    - –¢—Ä–µ–Ω–¥—ã
    """
    
    def __init__(
        self,
        window_minutes: int = 60,
        error_threshold_percent: float = 5.0,
        critical_threshold_percent: float = 10.0,
        min_requests_for_alert: int = 50
    ):
        """
        Args:
            window_minutes: –û–∫–Ω–æ –∞–Ω–∞–ª–∏–∑–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
            error_threshold_percent: –ü–æ—Ä–æ–≥ –¥–ª—è warning (%)
            critical_threshold_percent: –ü–æ—Ä–æ–≥ –¥–ª—è critical alert (%)
            min_requests_for_alert: –ú–∏–Ω–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∞–ª–µ—Ä—Ç–∞
        """
        self.window = timedelta(minutes=window_minutes)
        self.error_threshold = error_threshold_percent
        self.critical_threshold = critical_threshold_percent
        self.min_requests = min_requests_for_alert
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–±—ã—Ç–∏–π (deque –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö)
        self.errors: deque[ErrorEvent] = deque(maxlen=10000)
        self.successes: deque[datetime] = deque(maxlen=10000)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—à–∏–±–æ–∫
        self.error_counts: Dict[ErrorType, int] = {et: 0 for et in ErrorType}
        
        # –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞ –∞–ª–µ—Ä—Ç–æ–≤
        self.last_alert_time: Optional[datetime] = None
        self.alert_cooldown = timedelta(minutes=15)
        
        # Callbacks –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
        self.alert_callbacks: List[callable] = []
    
    def register_alert_callback(self, callback: callable):
        """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤."""
        self.alert_callbacks.append(callback)
    
    def track_success(self):
        """–û—Ç–º–µ—Ç–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å."""
        self.successes.append(datetime.now())
    
    def track_error(
        self,
        error_type: ErrorType,
        nm_id: Optional[int] = None,
        details: Optional[str] = None
    ):
        """–û—Ç–º–µ—Ç–∏—Ç—å –æ—à–∏–±–∫—É."""
        event = ErrorEvent(
            timestamp=datetime.now(),
            error_type=error_type,
            nm_id=nm_id,
            details=details
        )
        self.errors.append(event)
        self.error_counts[error_type] += 1
        
        logger.warning(
            f"API Error tracked: {error_type.value} "
            f"(nm_id={nm_id}, details={details})"
        )
    
    def _cleanup_old_events(self):
        """–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏—è —Å—Ç–∞—Ä—à–µ –æ–∫–Ω–∞ –∞–Ω–∞–ª–∏–∑–∞."""
        cutoff = datetime.now() - self.window
        
        # –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–æ–∫
        while self.errors and self.errors[0].timestamp < cutoff:
            old_event = self.errors.popleft()
            self.error_counts[old_event.error_type] -= 1
        
        # –û—á–∏—Å—Ç–∫–∞ —É—Å–ø–µ—Ö–æ–≤
        while self.successes and self.successes[0] < cutoff:
            self.successes.popleft()
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."""
        self._cleanup_old_events()
        
        total_errors = len(self.errors)
        total_successes = len(self.successes)
        total_requests = total_errors + total_successes
        
        error_rate = (
            (total_errors / total_requests * 100)
            if total_requests > 0 else 0
        )
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        error_breakdown = {
            et.value: count
            for et, count in self.error_counts.items()
            if count > 0
        }
        
        return {
            "window_minutes": self.window.total_seconds() / 60,
            "total_requests": total_requests,
            "total_errors": total_errors,
            "total_successes": total_successes,
            "error_rate_percent": round(error_rate, 2),
            "error_breakdown": error_breakdown,
            "is_healthy": error_rate < self.error_threshold,
            "is_critical": error_rate >= self.critical_threshold
        }
    
    async def check_and_alert(self) -> Optional[Dict]:
        """
        –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
        
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–ª–µ—Ä—Ç–µ –∏–ª–∏ None
        """
        stats = self.get_statistics()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        if stats['total_requests'] < self.min_requests:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
        now = datetime.now()
        if (self.last_alert_time and 
            now - self.last_alert_time < self.alert_cooldown):
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º severity
        severity = None
        if stats['is_critical']:
            severity = "CRITICAL"
        elif not stats['is_healthy']:
            severity = "WARNING"
        
        if severity:
            self.last_alert_time = now
            
            alert_data = {
                "severity": severity,
                "timestamp": now,
                "statistics": stats,
                "message": self._format_alert_message(severity, stats)
            }
            
            # –í—ã–∑—ã–≤–∞–µ–º callbacks
            for callback in self.alert_callbacks:
                try:
                    if asyncio.iscoroutinefunction(callback):
                        await callback(alert_data)
                    else:
                        callback(alert_data)
                except Exception as e:
                    logger.exception(f"Error in alert callback: {e}")
            
            return alert_data
        
        return None
    
    def _format_alert_message(self, severity: str, stats: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞."""
        icon = "üö®" if severity == "CRITICAL" else "‚ö†Ô∏è"
        
        message = (
            f"{icon} <b>{severity}: –ü—Ä–æ–±–ª–µ–º—ã —Å API Wildberries</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {stats['window_minutes']:.0f} –º–∏–Ω—É—Ç:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}\n"
            f"‚Ä¢ –û—à–∏–±–æ–∫: {stats['total_errors']}\n"
            f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: <b>{stats['error_rate_percent']}%</b>\n\n"
        )
        
        if stats['error_breakdown']:
            message += "üìã <b>–¢–∏–ø—ã –æ—à–∏–±–æ–∫:</b>\n"
            for error_type, count in stats['error_breakdown'].items():
                message += f"‚Ä¢ {error_type}: {count}\n"
            message += "\n"
        
        if severity == "CRITICAL":
            message += (
                "‚ö†Ô∏è <b>–î–µ–π—Å—Ç–≤–∏—è:</b>\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å API WB\n"
                "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏\n"
                "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏\n"
            )
        else:
            message += "üí° –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å–∏—Ç—É–∞—Ü–∏—é..."
        
        return message


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–µ–∫–µ—Ä
_error_tracker: Optional[ErrorTracker] = None


def get_error_tracker() -> ErrorTracker:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç—Ä–µ–∫–µ—Ä–∞."""
    global _error_tracker
    if _error_tracker is None:
        _error_tracker = ErrorTracker(
            window_minutes=60,
            error_threshold_percent=5.0,
            critical_threshold_percent=10.0,
            min_requests_for_alert=50
        )
    return _error_tracker
