"""–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è Wildberries ‚Äî –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ nm_id –∏–∑ —Å—Å—ã–ª–∫–∏ –∏ —Ä–∞—Å—á—ë—Ç—ã."""
import re
from typing import Optional
from services.db import DB


def extract_nm_id(text: str) -> Optional[int]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç nm_id (–∞—Ä—Ç–∏–∫—É–ª Wildberries) –∏–∑ —Ç–µ–∫—Å—Ç–∞, —Å—Å—ã–ª–∫–∏ –∏–ª–∏ —á–∏—Å—Ç–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è:
    - –°—Å—ã–ª–∫–∏: /catalog/<—á–∏—Å–ª–æ>/detail.aspx
    - –ß–∏—Å—Ç—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã: –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ 6-12 —Ü–∏—Ñ—Ä
    - –¢–µ–∫—Å—Ç —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç int –∏–ª–∏ None.
    """
    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —à–∞–±–ª–æ–Ω —Å—Å—ã–ª–∫–∏ /catalog/<—á–∏—Å–ª–æ>/detail.aspx
    match = re.search(r"/catalog/(\d{5,12})/detail\.aspx", text)
    if match:
        return int(match.group(1))

    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ (–∞—Ä—Ç–∏–∫—É–ª –±–µ–∑ —Å—Å—ã–ª–∫–∏)
    text_stripped = text.strip()
    if text_stripped.isdigit() and 5 <= len(text_stripped) <= 12:
        return int(text_stripped)

    # Fallback: –∏—â–µ–º —á–∏—Å–ª–∞ 6-12 —Ü–∏—Ñ—Ä –≤ —Ç–µ–∫—Å—Ç–µ
    match = re.search(r"\b(\d{6,12})\b", text)
    if match:
        return int(match.group(1))

    return None


def apply_wallet_discount(price: int, discount_percent: int) -> int:
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–∫–∏–¥–∫—É WB –∫–æ—à–µ–ª—å–∫–∞ –∏ –æ–∫—Ä—É–≥–ª—è–µ—Ç –≤–Ω–∏–∑ (int).
    """
    if discount_percent <= 0:
        return price

    discounted = price * (1 - discount_percent / 100.0)
    return int(discounted)  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –≤–Ω–∏–∑


def format_price_change(old_price: float, new_price: float) -> dict:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Returns:
        dict: {
            'diff': float - –∞–±—Å–æ–ª—é—Ç–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞,
            'percent': float - –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞,
            'is_decrease': bool - —Å–Ω–∏–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–µ—Ç
        }
    """
    diff = old_price - new_price
    percent = (diff / old_price) * 100 if old_price > 0 else 0

    return {
        'diff': abs(diff),
        'percent': abs(percent),
        'is_decrease': diff > 0
    }


async def calculate_potential_savings(db: DB, user_id: int) -> str:
    """–ü–æ–¥—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏."""
    products = await db.list_products(user_id)

    if not products:
        return ""

    total_savings = 0
    for p in products:
        history = await db.get_price_history(p.id, limit=30)
        if len(history) >= 2:
            prices = [h.product_price for h in history]
            max_price = max(prices)
            current_price = p.last_product_price or max_price
            savings = max_price - current_price
            if savings > 0:
                total_savings += savings

    if total_savings > 0:
        return (
            f"üí∞ <b>–í—ã —É–∂–µ –º–æ–∂–µ—Ç–µ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å {total_savings}‚ÇΩ</b>\n"
            f"–µ—Å–ª–∏ –∫—É–ø–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–æ —Ç–µ–∫—É—â–∏–º —Ü–µ–Ω–∞–º!\n\n"
        )

    return "üìà –ü–æ–∫–∞ –Ω–µ—Ç —Å–Ω–∏–∂–µ–Ω–∏–π, –Ω–æ —è —Å–ª–µ–∂—É –∑–∞ —Ü–µ–Ω–∞–º–∏!\n\n"
