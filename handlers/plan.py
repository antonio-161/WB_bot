from aiogram import Router, F
from aiogram.types import CallbackQuery
from handlers.settings import start_onboarding
from services.db import DB
from keyboards.kb import main_inline_kb, plan_detail_kb, choose_plan_kb
from constants import PLAN_DESCRIPTIONS

router = Router()

PLANS = {
    "plan_free": {"name": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π", "max_links": 5},
    "plan_basic": {"name": "–ë–∞–∑–æ–≤—ã–π", "max_links": 50},
    "plan_pro": {"name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "max_links": 250},
}


@router.callback_query(F.data.startswith("plan_"))
async def show_plan_details(query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞."""
    plan_key = query.data
    
    if plan_key not in PLAN_DESCRIPTIONS:
        await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return
    
    plan_info = PLAN_DESCRIPTIONS[plan_key]
    
    text = (
        f"{plan_info['name']}\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {plan_info['price']}\n\n"
        f"{plan_info['description']}"
    )
    
    await query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=plan_detail_kb(plan_key)
    )
    await query.answer()


@router.callback_query(F.data.startswith("confirm_plan_"))
async def confirm_plan_callback(query: CallbackQuery, db: DB):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞."""
    plan_key = query.data.replace("confirm_", "")
    plan = PLANS.get(plan_key)

    if not plan:
        await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞—Ä–∏—Ñ –≤ –ë–î
    await db.set_plan(
        user_id=query.from_user.id,
        plan_key=plan_key,
        plan_name=plan["name"],
        max_links=plan["max_links"]
    )

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    await query.message.edit_text(
        text=(
            f"‚úÖ <b>–¢–∞—Ä–∏—Ñ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
            f"üìã –í—ã–±—Ä–∞–Ω: <b>{plan['name']}</b>\n"
            f"üìä –õ–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤: <b>{plan['max_links']}</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è üëá"
        ),
        parse_mode="HTML",
        reply_markup=main_inline_kb()
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∏–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
    await start_onboarding(query.message, db, query.from_user.id, plan_key)

    await query.answer(f"‚úÖ –¢–∞—Ä–∏—Ñ {plan['name']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", show_alert=False)


@router.callback_query(F.data == "back_to_plan_choice")
async def back_to_plan_choice(query: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞."""
    await query.message.edit_text(
        "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–∞—Ä–∏—Ñ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ üëá",
        parse_mode="HTML",
        reply_markup=choose_plan_kb()
    )
    await query.answer()
