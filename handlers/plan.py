from aiogram import Router, F
from aiogram.types import CallbackQuery
from handlers.settings import start_onboarding
from services.db import DB
from keyboards.kb import main_inline_kb, plan_detail_kb, choose_plan_kb
from constants import PLAN_DESCRIPTIONS

router = Router()

PLANS = {
    "plan_free": {"name": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π", "max_links": 5},
    "plan_basic": {"name": "–ë–∞–∑–æ–≤—ã–π", "max_links": 50},
    "plan_pro": {"name": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", "max_links": 250},
}


@router.callback_query(F.data.startswith("plan_"))
async def show_plan_details(query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞."""
    plan_key = query.data
    
    if plan_key not in PLAN_DESCRIPTIONS:
        await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return
    
    plan_info = PLAN_DESCRIPTIONS[plan_key]
    
    text = (
        f"{plan_info['name']}\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {plan_info['price']}\n\n"
        f"{plan_info['description']}"
    )
    
    await query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=plan_detail_kb(plan_key)
    )
    await query.answer()


@router.callback_query(F.data.startswith("confirm_plan_"))
async def confirm_plan_callback(query: CallbackQuery, db: DB):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞."""
    plan_key = query.data.replace("confirm_", "")
    plan = PLANS.get(plan_key)

    if not plan:
        await query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ", show_alert=True)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞—Ä–∏—Ñ –≤ –ë–î
    await db.set_plan(
        user_id=query.from_user.id,
        plan_key=plan_key,
        plan_name=plan["name"],
        max_links=plan["max_links"]
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∞—Ä–∏—Ñ–∞
    if plan_key == "plan_free":
        next_steps = (
            "üéØ <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>\n"
            "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –¥–æ 5 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "2Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∫–∏–¥–∫—É WB –∫–æ—à–µ–ª—å–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
            "3Ô∏è‚É£ –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω\n\n"
            "üí° –ö–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –±–æ–ª—å—à–µ —Å–ª–æ—Ç–æ–≤ ‚Äî —É–ª—É—á—à–∏—Ç–µ —Ç–∞—Ä–∏—Ñ!"
        )
    elif plan_key == "plan_basic":
        next_steps = (
            "üéØ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:</b>\n"
            "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã (–¥–æ 50 —à—Ç)\n"
            "2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–π –ü–í–ó –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ü–µ–Ω\n"
            "3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∫–∏–¥–∫—É WB –∫–æ—à–µ–ª—å–∫–∞\n"
            "4Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ø–æ % –∏–ª–∏ –ø–æ—Ä–æ–≥—É)\n\n"
            "üî• –ú–∞–∫—Å–∏–º—É–º –ø–æ–ª—å–∑—ã –æ—Ç —Ç–∞—Ä–∏—Ñ–∞!"
        )
    else:  # pro
        next_steps = (
            "üéØ <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "1Ô∏è‚É£ –î–æ–±–∞–≤—å—Ç–µ –¥–æ 250 —Ç–æ–≤–∞—Ä–æ–≤\n"
            "2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–≤–æ–π –ü–í–ó\n"
            "3Ô∏è‚É£ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–∫–∏–¥–∫—É WB –∫–æ—à–µ–ª—å–∫–∞\n"
            "4Ô∏è‚É£ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö\n"
            "5Ô∏è‚É£ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ Excel/CSV\n\n"
            "üíé –£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª!"
        )

    await query.message.edit_text(
        text=(
            f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
            f"üìã –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–∞—Ä–∏—Ñ: <b>{plan['name']}</b>\n"
            f"üìä –õ–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤: <b>{plan['max_links']}</b>\n\n"
            f"{next_steps}"
        ),
        parse_mode="HTML",
        reply_markup=main_inline_kb()
    )

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤
    if plan_key in ["plan_basic", "plan_pro"]:
        await start_onboarding(query.message, db, query.from_user.id, plan_key)

    await query.answer(f"‚úÖ –¢–∞—Ä–∏—Ñ {plan['name']} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!", show_alert=False)


@router.callback_query(F.data == "back_to_plan_choice")
async def back_to_plan_choice(query: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∞—Ä–∏—Ñ–∞."""
    await query.message.edit_text(
        "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–∞—Ä–∏—Ñ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ üëá",
        parse_mode="HTML",
        reply_markup=choose_plan_kb()
    )
    await query.answer()
