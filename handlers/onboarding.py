"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""
from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from services.db import DB
from states.user_states import AddProductState
from keyboards.kb import choose_plan_kb, show_plans_kb, upsell_kb

router = Router()


@router.callback_query(F.data == "onboarding_add_first")
async def onboarding_add_first_product(query: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä."""

    await query.message.edit_text(
        "üéØ <b>–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä</b>\n\n"
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries\n"
        "‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)\n\n"
        "üí° <b>–ù–∞–ø—Ä–∏–º–µ—Ä:</b>\n"
        "<code>https://www.wildberries.ru/catalog/12345678/detail.aspx</code>\n\n"
        "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —è –ø–æ–∫–∞–∂—É —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ –ø—Ä–µ–¥–ª–æ–∂—É –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ.",
        parse_mode="HTML"
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    await state.set_state(AddProductState.waiting_for_url)
    await state.update_data(onboarding=True)
    await query.answer()


@router.callback_query(F.data == "show_plans_first")
async def show_plans_before_product(query: CallbackQuery):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç —Å–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã."""

    await query.message.edit_text(
        "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–∞—Ä–∏—Ñ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ üëá",
        parse_mode="HTML",
        reply_markup=choose_plan_kb()
    )
    await query.answer()


@router.callback_query(F.data == "show_upgrade_benefits")
async def show_upgrade_benefits(query: CallbackQuery, db: DB):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤."""

    user = await db.get_user(query.from_user.id)
    products = await db.list_products(query.from_user.id)
    current_plan = user.get("plan", "plan_free")

    if current_plan != "plan_free":
        await query.answer("–£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ!", show_alert=True)
        return

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–ø—É—â–µ–Ω–Ω—É—é –≤—ã–≥–æ–¥—É
    potential_items = 50 - len(products)  # –ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ

    await query.message.edit_text(
        "üöÄ <b>–†–∞—Å—à–∏—Ä—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!</b>\n\n"
        f"üì¶ –°–µ–π—á–∞—Å —É –≤–∞—Å: <b>{len(products)}/5</b> —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        "üí° <b>–° —Ç–∞—Ä–∏—Ñ–æ–º –ë–∞–∑–æ–≤—ã–π (199‚ÇΩ/–º–µ—Å):</b>\n"
        f"‚úÖ –î–æ <b>50 —Ç–æ–≤–∞—Ä–æ–≤</b> (+{potential_items} —Å–ª–æ—Ç–æ–≤!)\n"
        "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ <b>3 –º–µ—Å—è—Ü–∞</b>\n"
        "‚úÖ –í–∞—à <b>–ü–í–ó</b> –¥–ª—è —Ç–æ—á–Ω—ã—Ö —Ü–µ–Ω\n"
        "‚úÖ <b>–£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b>\n"
        "‚úÖ <b>–ê–ª–µ—Ä—Ç—ã –æ –Ω–∞–ª–∏—á–∏–∏</b>\n\n"
        "üéØ –û–∫—É–ø–∞–µ—Ç—Å—è —Å –æ–¥–Ω–æ–π –ø–æ–∫—É–ø–∫–∏!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:",
        parse_mode="HTML",
        reply_markup=show_plans_kb()
    )
    await query.answer()


@router.callback_query(F.data == "upsell_limit_reached")
async def upsell_when_limit_reached(query: CallbackQuery, db: DB):
    """–ü–æ–∫–∞–∑–∞—Ç—å upsell –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞."""

    # user = await db.get_user(query.from_user.id)
    products = await db.list_products(query.from_user.id)

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —ç–∫–æ–Ω–æ–º–∏—é
    total_savings = 0
    for p in products:
        history = await db.get_price_history(p.id, limit=30)
        if len(history) >= 2:
            prices = [h.product_price for h in history]
            savings = max(prices) - min(prices)
            if savings > 0:
                total_savings += savings

    avg_savings = total_savings // len(products) if products else 0

    msg = (
        "‚õîÔ∏è <b>–õ–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç</b>\n\n"
        f"üì¶ –í—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ: <b>{len(products)}/5</b> —Ç–æ–≤–∞—Ä–æ–≤\n"
    )

    if avg_savings > 0:
        msg += f"üí∞ –°—Ä–µ–¥–Ω—è—è —ç–∫–æ–Ω–æ–º–∏—è –Ω–∞ —Ç–æ–≤–∞—Ä: <b>{avg_savings}‚ÇΩ</b>\n\n"
    else:
        msg += "\n"

    msg += (
        "üòî <b>–ß—Ç–æ –≤—ã —É–ø—É—Å–∫–∞–µ—Ç–µ:</b>\n"
        "‚ùå –ù–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã\n"
        "‚ùå –¢–µ—Ä—è–µ—Ç–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏\n"
        "‚ùå –í–∏–¥–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –∑–∞ –º–µ—Å—è—Ü\n\n"
        "üí° <b>–†–µ—à–µ–Ω–∏–µ:</b>\n"
        "–° —Ç–∞—Ä–∏—Ñ–æ–º <b>–ë–∞–∑–æ–≤—ã–π</b> (199‚ÇΩ/–º–µ—Å):\n"
        "‚úÖ –î–æ 50 —Ç–æ–≤–∞—Ä–æ–≤ (–≤ 10 —Ä–∞–∑ –±–æ–ª—å—à–µ!)\n"
        "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ 3 –º–µ—Å—è—Ü–∞\n"
        "‚úÖ –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        "üéÅ <b>–û–∫—É–ø–∏—Ç—Å—è —Å 1 –ø–æ–∫—É–ø–∫–∏!</b>"
    )

    await query.message.edit_text(
        msg,
        parse_mode="HTML",
        reply_markup=upsell_kb()
    )
    await query.answer()
