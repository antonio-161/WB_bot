from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states.user_states import SetDiscountState
from services.db import DB
from keyboards.kb import (
    settings_kb, back_to_settings_kb, upgrade_plan_kb, choose_plan_kb,
    main_inline_kb, onboarding_pvz_kb
)

router = Router()


async def start_onboarding(message, db: DB, user_id: int, plan_key: str):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    from keyboards.kb import onboarding_discount_kb

    await message.answer(
        "üéØ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</b>\n\n"
        "–î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞ —Ü–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∫–∏–¥–∫—É –≤–∞—à–µ–≥–æ WB –∫–æ—à–µ–ª—å–∫–∞.\n\n"
        "üí° –ù–∞–π—Ç–∏ –º–æ–∂–Ω–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ WB ‚Üí –ü—Ä–æ—Ñ–∏–ª—å ‚Üí WB –ö–æ—à–µ–ª—ë–∫",
        parse_mode="HTML",
        reply_markup=onboarding_discount_kb()
    )


@router.callback_query(F.data == "onboarding_set_discount")
async def onboarding_discount(query: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
    await query.message.edit_text(
        "üí≥ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∏–¥–∫–∏ WB –∫–æ—à–µ–ª—å–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100).\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>7</code>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="HTML"
    )
    await state.set_state(SetDiscountState.waiting_for_discount)
    await state.update_data(onboarding=True)
    await query.answer()


@router.callback_query(F.data == "onboarding_skip_discount")
async def onboarding_skip_discount(query: CallbackQuery, db: DB):
    """–ü—Ä–æ–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∏–¥–∫–∏."""
    user = await db.get_user(query.from_user.id)
    plan = user.get("plan", "plan_free") if user else "plan_free"

    if plan in ["plan_basic", "plan_pro"]:
        await query.message.edit_text(
            "üìç <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞</b>\n\n"
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤.\n\n"
            "üí° –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ú–æ—Å–∫–≤–∞",
            parse_mode="HTML",
            reply_markup=onboarding_pvz_kb()
        )
    else:
        await query.message.edit_text(
            "‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è üëá",
            parse_mode="HTML",
            reply_markup=main_inline_kb()
        )
    await query.answer()


@router.callback_query(F.data == "onboarding_set_pvz")
async def onboarding_pvz(query: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ü–í–ó –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞."""
    from handlers.region import cb_set_pvz
    await state.update_data(onboarding=True)
    await cb_set_pvz(query, state, query.bot.get("db"))


@router.callback_query(F.data == "onboarding_skip_pvz")
async def onboarding_skip_pvz(query: CallbackQuery):
    """–ü—Ä–æ–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ü–í–ó."""
    await query.message.edit_text(
        "‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–≥–∏–æ–Ω: <b>–ú–æ—Å–∫–≤–∞</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è üëá",
        parse_mode="HTML",
        reply_markup=main_inline_kb()
    )
    await query.answer()


@router.callback_query(F.data == "settings")
async def cb_settings(query: CallbackQuery, db: DB):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = await db.get_user(query.from_user.id)

    if not user:
        await query.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    discount = user.get("discount_percent", 0)
    plan_name = user.get("plan_name", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    max_links = user.get("max_links", 5)
    dest = user.get("dest", -1257786)
    pvz_address = user.get("pvz_address")

    products = await db.list_products(query.from_user.id)
    used_slots = len(products)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ü–í–ó
    from constants import DEFAULT_DEST
    if dest == DEFAULT_DEST or not dest:
        pvz_info = "–ú–æ—Å–∫–≤–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
    elif pvz_address:
        pvz_info = pvz_address
    else:
        pvz_info = f"–ö–æ–¥: {dest}"

    text = (
        "‚öôÔ∏è <b>–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"üìã –¢–∞—Ä–∏—Ñ: <b>{plan_name}</b>\n"
        f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–ª–æ—Ç–æ–≤: <b>{used_slots}/{max_links}</b>\n"
        f"üí≥ –°–∫–∏–¥–∫–∞ WB –∫–æ—à–µ–ª—å–∫–∞: <b>{discount}%</b>\n"
        f"üìç –ü–í–ó: <b>{pvz_info}</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫."
    )

    await query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=settings_kb()
    )
    await query.answer()


@router.callback_query(F.data == "set_discount")
async def cb_set_discount(query: CallbackQuery, state: FSMContext, db: DB):
    """–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∏–¥–∫–∏ —á–µ—Ä–µ–∑ callback."""
    user = await db.get_user(query.from_user.id)
    current_discount = user.get("discount_percent", 0) if user else 0

    await query.message.answer(
        "üí≥ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∏–¥–∫–∏ WB –∫–æ—à–µ–ª—å–∫–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: <b>{current_discount}%</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100).\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>7</code>\n\n"
        "–≠—Ç–∞ —Å–∫–∏–¥–∫–∞ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="HTML"
    )
    await state.set_state(SetDiscountState.waiting_for_discount)
    await query.answer()


@router.message(SetDiscountState.waiting_for_discount)
async def process_discount(message: Message, state: FSMContext, db: DB):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∏–¥–∫–∏."""
    if message.text == "/cancel":
        await message.answer(
            "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∏–¥–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=settings_kb()
        )
        await state.clear()
        return

    try:
        v = int(message.text.strip())
        if v < 0 or v > 100:
            raise ValueError
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100."
        )
        return

    await db.ensure_user(message.from_user.id)
    await db.set_discount(message.from_user.id, v)

    await message.answer(
        f"‚úÖ –°–∫–∏–¥–∫–∞ WB –∫–æ—à–µ–ª—å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: <b>{v}%</b>\n\n"
        "–û–Ω–∞ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ü–µ–Ω.",
        parse_mode="HTML",
        reply_markup=back_to_settings_kb()
    )
    data = await state.get_data()
    is_onboarding = data.get("onboarding", False)

    if is_onboarding:
        user = await db.get_user(message.from_user.id)
        plan = user.get("plan", "plan_free") if user else "plan_free"

        if plan in ["plan_basic", "plan_pro"]:
            
            await message.answer(
                "üìç <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞</b>\n\n"
                "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤.\n\n"
                "üí° –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ú–æ—Å–∫–≤–∞",
                parse_mode="HTML",
                reply_markup=onboarding_pvz_kb()
            )
        else:
            await message.answer(
                "‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è üëá",
                parse_mode="HTML",
                reply_markup=main_inline_kb()
            )

    await state.clear()


@router.callback_query(F.data == "my_plan")
async def cb_my_plan(query: CallbackQuery, db: DB):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç–∞—Ä–∏—Ñ–µ."""
    user = await db.get_user(query.from_user.id)

    if not user:
        await query.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    plan_name = user.get("plan_name", "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    max_links = user.get("max_links", 5)

    products = await db.list_products(query.from_user.id)
    used_slots = len(products)

    text = (
        f"üí≥ <b>–í–∞—à —Ç–∞—Ä–∏—Ñ: {plan_name}</b>\n\n"
        f"üìä –õ–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤: <b>{max_links}</b>\n"
        f"üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: <b>{used_slots}</b>\n"
        f"üÜì –°–≤–æ–±–æ–¥–Ω–æ: <b>{max_links - used_slots}</b>\n\n"
    )

    if max_links == 5:
        text += (
            "üéÅ –í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.\n\n"
            "–•–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤?\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Å–º–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞."
        )

    await query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=upgrade_plan_kb()
    )
    await query.answer()


@router.callback_query(F.data == "upgrade_plan")
async def cb_upgrade_plan(query: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è."""
    await query.message.edit_text(
        "üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ:</b>\n\n"
        "üéÅ <b>–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π</b> ‚Äî –¥–æ 5 —Ç–æ–≤–∞—Ä–æ–≤\n"
        "üíº <b>–ë–∞–∑–æ–≤—ã–π</b> ‚Äî –¥–æ 50 —Ç–æ–≤–∞—Ä–æ–≤\n"
        "üöÄ <b>–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π</b> ‚Äî –¥–æ 250 —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        "–î–ª—è —Å–º–µ–Ω—ã —Ç–∞—Ä–∏—Ñ–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ:",
        parse_mode="HTML",
        reply_markup=choose_plan_kb()
    )
    await query.answer()
