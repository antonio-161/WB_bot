from aiogram import Router, F
from aiogram.types import CallbackQuery
from services.db import DB
from keyboards.kb import back_to_menu_kb

router = Router()


@router.callback_query(F.data == "my_stats")
async def show_stats(query: CallbackQuery, db: DB):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = await db.get_user(query.from_user.id)
    products = await db.list_products(query.from_user.id)
    
    if not user:
        await query.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return
    
    # –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    total_products = len(products)
    in_stock = sum(1 for p in products if not p.out_of_stock)
    out_of_stock = total_products - in_stock
    
    # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞
    avg_price = 0
    if products:
        prices = [p.last_product_price for p in products if p.last_product_price]
        if prices:
            avg_price = sum(prices) // len(prices)
    
    # –°–∞–º—ã–π –¥–µ—à—ë–≤—ã–π –∏ –¥–æ—Ä–æ–≥–æ–π —Ç–æ–≤–∞—Ä
    cheapest = None
    most_expensive = None
    if products:
        sorted_by_price = sorted(
            [p for p in products if p.last_product_price],
            key=lambda x: x.last_product_price
        )
        if sorted_by_price:
            cheapest = sorted_by_price[0]
            most_expensive = sorted_by_price[-1]
    
    text = (
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üì¶ <b>–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> {total_products}\n"
        f"‚úÖ <b>–í –Ω–∞–ª–∏—á–∏–∏:</b> {in_stock}\n"
        f"‚ùå <b>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏:</b> {out_of_stock}\n\n"
        f"üí∞ <b>–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞:</b> {avg_price} ‚ÇΩ\n"
    )
    
    if cheapest:
        text += f"\nüîΩ <b>–°–∞–º—ã–π –¥–µ—à—ë–≤—ã–π:</b>\n{cheapest.display_name[:40]} ‚Äî {cheapest.last_product_price} ‚ÇΩ\n"
    
    if most_expensive:
        text += f"\nüîº <b>–°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π:</b>\n{most_expensive.display_name[:40]} ‚Äî {most_expensive.last_product_price} ‚ÇΩ\n"
    
    await query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=back_to_menu_kb()
    )
    await query.answer()
