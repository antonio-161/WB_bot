from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states.user_states import AddProductState
from services.db import DB
from services.price_fetcher import PriceFetcher
from utils.wb_utils import extract_nm_id
from keyboards.kb import products_inline, main_inline_kb
from decimal import Decimal


router = Router()


# ---------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ----------------
@router.callback_query(F.data == "add_product")
async def cb_add_product(query: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ InlineKeyboard."""
    await query.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–ª–∏–º–∏—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞)."
    )
    await state.set_state(AddProductState.waiting_for_url)
    await query.answer()


@router.message(AddProductState.waiting_for_url)
async def add_url(message: Message, state: FSMContext, db: DB):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ InlineKeyboard."""
    url = message.text.strip()
    nm = extract_nm_id(url)
    if not nm:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å nm_id –∏–∑ —Å—Å—ã–ª–∫–∏. –ü—Ä–∏—à–ª–∏ –≤–∞–ª–∏–¥–Ω—É—é —Å—Å—ã–ª–∫—É WB."
        )
        await state.clear()
        return

    await db.ensure_user(message.from_user.id)
    user = await db.get_user(message.from_user.id)
    prods = await db.list_products(message.from_user.id)
    max_links = user.get("max_links", 3)
    if len(prods) >= max_links:
        await message.answer(
            f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ({max_links}) —Å—Å—ã–ª–æ–∫. "
            "–£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—É—é –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."
        )
        await state.clear()
        return

    added = await db.add_product(message.from_user.id, url, nm)
    if not added:
        await message.answer("–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏.")
        await state.clear()
        return

    # –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
    fetcher = PriceFetcher()
    try:
        prices = await fetcher.get_price(nm)
        last_id = (await db.list_products(message.from_user.id))[-1].id
        await db.update_prices(
            product_id=last_id,
            basic=Decimal(str(prices["basic"])),
            product=Decimal(str(prices["product"]))
        )
    except Exception:
        pass

    await message.answer(
        f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä nm={nm}. –Ø –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—É.",
        reply_markup=main_inline_kb()
    )
    await state.clear()


# ---------------- –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ----------------
@router.callback_query(F.data == "list_products")
async def cb_list_products(query: CallbackQuery, db: DB):
    """–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ InlineKeyboard."""
    products = await db.list_products(query.from_user.id)
    if not products:
        await query.message.answer(
            "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä."
        )
        await query.answer()
        return

    text = "–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
    arr = []
    for p in products:
        text += f'<a href="{p.url_product}">üõç {p.name_product}</a>\n'
        arr.append({"name": p.name_product})

    await query.message.answer(
        text,
        reply_markup=products_inline(arr),  # —Ç–≤–æ—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        parse_mode="HTML"
    )
    await query.answer()


# ---------------- –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ----------------
@router.callback_query(F.data.startswith("rm:"))
async def cb_remove(query: CallbackQuery, db: DB):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ InlineKeyboard."""
    await query.answer()
    nm = int(query.data.split(":", 1)[1])
    ok = await db.remove_product(query.from_user.id, nm)
    if ok:
        await query.message.edit_text(
            "‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.", reply_markup=main_inline_kb()
        )
    else:
        await query.message.edit_text(
            "‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
            reply_markup=main_inline_kb()
        )
