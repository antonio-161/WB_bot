from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext
from states.user_states import AddProductState, RenameProductState
from services.db import DB
from services.price_fetcher import PriceFetcher
from utils.wb_utils import extract_nm_id
from keyboards.kb import (
    products_inline, main_inline_kb, sizes_inline_kb,
    product_detail_kb, confirm_remove_kb, back_to_product_kb
)
from utils.graph_generator import generate_price_graph
from decimal import Decimal
import logging

router = Router()
logger = logging.getLogger(__name__)


# ---------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ----------------
@router.callback_query(F.data == "add_product")
async def cb_add_product(query: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""
    await query.message.answer(
        "üìé <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries\n"
        "‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)\n\n"
        "–õ–∏–º–∏—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.",
        parse_mode="HTML"
    )
    await state.set_state(AddProductState.waiting_for_url)
    await query.answer()


@router.message(AddProductState.waiting_for_url)
async def add_url(message: Message, state: FSMContext, db: DB, price_fetcher: PriceFetcher):
    url_or_nm = message.text.strip()
    nm = extract_nm_id(url_or_nm)

    if not nm:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä WB\n"
            "‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª (6-12 —Ü–∏—Ñ—Ä)"
        )
        return

    await db.ensure_user(message.from_user.id)
    user = await db.get_user(message.from_user.id)
    prods = await db.list_products(message.from_user.id)
    max_links = user.get("max_links", 5)

    if len(prods) >= max_links:
        await message.answer(
            f"‚õî –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ({max_links}) —Ç–æ–≤–∞—Ä–æ–≤.\n"
            "–£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.",
            reply_markup=main_inline_kb()
        )
        await state.clear()
        return

    status_msg = await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ...")

    try:
        product_data = await price_fetcher.get_product_data(nm)
        if not product_data:
            await status_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            await state.clear()
            return

        product_name = product_data.get("name", f"–¢–æ–≤–∞—Ä {nm}")
        sizes = product_data.get("sizes", [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Ç–æ–≤–∞—Ä–∞
        url = f"https://www.wildberries.ru/catalog/{nm}/detail.aspx"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–Ω–µ –ø—É—Å—Ç—ã–µ name –∏ origName)
        valid_sizes = []
        if sizes:
            valid_sizes = [
                s for s in sizes 
                if s.get("name") not in ("", "0", None) 
                and s.get("origName") not in ("", "0", None)
            ]

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
        if valid_sizes:
            await state.update_data(url=url, nm=nm, product_name=product_name)

            await status_msg.edit_text(
                f"üì¶ <b>{product_name}</b>\n"
                f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{nm}</code>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:",
                reply_markup=sizes_inline_kb(nm, valid_sizes),
                parse_mode="HTML"
            )
            await state.set_state(AddProductState.waiting_for_size)
        else:
            # –¢–æ–≤–∞—Ä –±–µ–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
            product_id = await db.add_product(message.from_user.id, url, nm, product_name)
            if not product_id:
                await status_msg.edit_text(
                    "‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏.",
                    reply_markup=main_inline_kb()
                )
                await state.clear()
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            # –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ü–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ sizes
            size_data = sizes[0] if sizes else {}
            price_info = size_data.get("price", {})
            price_basic = Decimal(str(price_info.get("basic", 0)))
            price_product = Decimal(str(price_info.get("product", 0)))
            qty = sum(stock.get("qty", 0) for stock in size_data.get("stocks", []))
            
            await db.update_prices_and_stock(
                product_id=product_id,
                basic=price_basic,
                product=price_product,
                last_qty=qty,
                out_of_stock=(qty == 0)
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            await db.add_price_history(product_id, price_basic, price_product, qty)

            # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            user = await db.get_user(message.from_user.id)
            discount = user.get("discount_percent", 0) if user else 0
            
            display_price = int(price_product)
            price_text = f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {display_price} ‚ÇΩ"
            
            if discount > 0:
                from utils.wb_utils import apply_wallet_discount
                final_price = apply_wallet_discount(display_price, discount)
                price_text = f"üí∞ –¶–µ–Ω–∞: {display_price} ‚ÇΩ\nüí≥ –° –∫–æ—à–µ–ª—å–∫–æ–º ({discount}%): {int(final_price)} ‚ÇΩ"

            await status_msg.edit_text(
                f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                f"üì¶ {product_name}\n"
                f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{nm}</code>\n"
                f"{price_text}\n\n"
                "–Ø –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã.",
                reply_markup=main_inline_kb(),
                parse_mode="HTML"
            )
            await state.clear()

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ {nm}: {e}")
        await status_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


@router.callback_query(F.data.startswith("select_size:"), AddProductState.waiting_for_size)
async def select_size_cb(query: CallbackQuery, state: FSMContext, db: DB, price_fetcher: PriceFetcher):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–æ–≤–∞—Ä–∞."""
    try:
        _, nm_str, size_name = query.data.split(":", 2)
        nm = int(nm_str)
        user_id = query.from_user.id

        data = await state.get_data()
        url = data.get("url")
        product_name = data.get("product_name")

        if not url or not product_name:
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            await state.clear()
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        product_id = await db.add_product(user_id, url, nm, product_name)
        if not product_id:
            await query.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏.", show_alert=True)
            await state.clear()
            return

        await db.set_selected_size(product_id, size_name)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        product_data = await price_fetcher.get_product_data(nm)
        if product_data and product_data.get("sizes"):
            size_data = next((s for s in product_data["sizes"] if s["name"] == size_name), None)
            if size_data:
                price_info = size_data.get("price", {})
                price_basic = Decimal(str(price_info.get("basic", 0)))
                price_product = Decimal(str(price_info.get("product", 0)))
                qty = sum(stock.get("qty", 0) for stock in size_data.get("stocks", []))
                
                await db.update_prices_and_stock(
                    product_id=product_id,
                    basic=price_basic,
                    product=price_product,
                    last_qty=qty,
                    out_of_stock=(qty == 0)
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                await db.add_price_history(product_id, price_basic, price_product, qty)

        await query.message.edit_text(
            f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üì¶ {product_name}\n"
            f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{nm}</code>\n"
            f"üîò –†–∞–∑–º–µ—Ä: <b>{size_name}</b>\n\n"
            "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
            parse_mode="HTML",
            reply_markup=main_inline_kb()
        )
        await query.answer("–†–∞–∑–º–µ—Ä –≤—ã–±—Ä–∞–Ω!")
        await state.clear()

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–º–µ—Ä–∞: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–º–µ—Ä–∞.", show_alert=True)
        await state.clear()


# ---------------- –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ----------------
@router.callback_query(F.data == "list_products")
async def cb_list_products(query: CallbackQuery, db: DB):
    """–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤."""
    products = await db.list_products(query.from_user.id)
    
    if not products:
        await query.message.edit_text(
            "üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.\n"
            "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!",
            reply_markup=main_inline_kb()
        )
        await query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(query.from_user.id)
    discount = user.get("discount_percent", 0) if user else 0

    text = "üì¶ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>\n\n"
    products_data = []
    
    for i, p in enumerate(products, 1):
        display_name = p.display_name
        price_info = ""
        if p.last_product_price:
            price = float(p.last_product_price)
            if discount > 0:
                from utils.wb_utils import apply_wallet_discount
                final_price = apply_wallet_discount(price, discount)
                price_info = f" ‚Äî {final_price:.2f} ‚ÇΩ"
            else:
                price_info = f" ‚Äî {price:.2f} ‚ÇΩ"
        
        text += f'{i}. {display_name[:45]}{price_info}\n'
        products_data.append({"nm_id": p.nm_id, "name": display_name})

    if discount > 0:
        text += f"\nüí≥ <i>–¶–µ–Ω—ã —Å —É—á—ë—Ç–æ–º —Å–∫–∏–¥–∫–∏ –∫–æ—à–µ–ª—å–∫–∞ {discount}%</i>"

    await query.message.edit_text(
        text,
        reply_markup=products_inline(products_data),
        parse_mode="HTML"
    )
    await query.answer()


# ---------------- –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ ----------------
@router.callback_query(F.data.startswith("product_detail:"))
async def cb_product_detail(query: CallbackQuery, db: DB):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ."""
    nm_id = int(query.data.split(":", 1)[1])
    
    product = await db.get_product_by_nm(query.from_user.id, nm_id)
    if not product:
        await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(query.from_user.id)
    discount = user.get("discount_percent", 0) if user else 0
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    history = await db.get_price_history(product.id, limit=100)
    
    text = f"üì¶ <b>{product.display_name}</b>\n\n"
    text += f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{nm_id}</code>\n"
    
    if product.selected_size:
        text += f"üîò –†–∞–∑–º–µ—Ä: <b>{product.selected_size}</b>\n"
    
    if product.last_product_price:
        price = float(product.last_product_price)
        if discount > 0:
            from utils.wb_utils import apply_wallet_discount
            final_price = apply_wallet_discount(price, discount)
            text += f"üí∞ –¶–µ–Ω–∞: {price:.2f} ‚ÇΩ\n"
            text += f"üí≥ –° –∫–æ—à–µ–ª—å–∫–æ–º ({discount}%): <b>{final_price:.2f} ‚ÇΩ</b>\n"
        else:
            text += f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{price:.2f} ‚ÇΩ</b>\n"
    
    if product.last_qty is not None:
        if product.out_of_stock:
            text += f"üì¶ –û—Å—Ç–∞—Ç–æ–∫: <b>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n"
        else:
            text += f"üì¶ –û—Å—Ç–∞—Ç–æ–∫: <b>{product.last_qty} —à—Ç.</b>\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    if history:
        prices = [float(h.product_price) for h in history]
        min_price = min(prices)
        max_price = max(prices)
        text += f"\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        
        if discount > 0:
            from utils.wb_utils import apply_wallet_discount
            min_with_discount = apply_wallet_discount(min_price, discount)
            max_with_discount = apply_wallet_discount(max_price, discount)
            text += f"‚Ä¢ –ú–∏–Ω. —Ü–µ–Ω–∞: {min_with_discount:.2f} ‚ÇΩ (–±—ã–ª–æ {min_price:.2f} ‚ÇΩ)\n"
            text += f"‚Ä¢ –ú–∞–∫—Å. —Ü–µ–Ω–∞: {max_with_discount:.2f} ‚ÇΩ (–±—ã–ª–æ {max_price:.2f} ‚ÇΩ)\n"
        else:
            text += f"‚Ä¢ –ú–∏–Ω. —Ü–µ–Ω–∞: {min_price:.2f} ‚ÇΩ\n"
            text += f"‚Ä¢ –ú–∞–∫—Å. —Ü–µ–Ω–∞: {max_price:.2f} ‚ÇΩ\n"
    
    text += f"\nüïê –î–æ–±–∞–≤–ª–µ–Ω: {product.created_at.strftime('%d.%m.%Y %H:%M')}"
    
    await query.message.edit_text(
        text,
        reply_markup=product_detail_kb(nm_id),
        parse_mode="HTML"
    )
    await query.answer()


# ---------------- –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω ----------------
@router.callback_query(F.data.startswith("show_graph:"))
async def cb_show_graph(query: CallbackQuery, db: DB):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã."""
    nm_id = int(query.data.split(":", 1)[1])
    
    product = await db.get_product_by_nm(query.from_user.id, nm_id)
    if not product:
        await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    history = await db.get_price_history(product.id, limit=100)
    
    if len(history) < 2:
        await query.answer(
            "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.\n"
            "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∑–∞–ø–∏—Å–∏ —Ü–µ–Ω.",
            show_alert=True
        )
        return
    
    await query.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        graph_buffer = await generate_price_graph(history, product.display_name)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
        photo = BufferedInputFile(graph_buffer.read(), filename=f"price_graph_{nm_id}.png")
        
        caption = (
            f"üìà <b>–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω</b>\n\n"
            f"üì¶ {product.display_name}\n"
            f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{nm_id}</code>\n"
            f"üìä –ó–∞–ø–∏—Å–µ–π: {len(history)}"
        )
        
        await query.message.answer_photo(
            photo=photo,
            caption=caption,
            parse_mode="HTML",
            reply_markup=back_to_product_kb(nm_id)
        )
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {nm_id}: {e}")
        await query.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# ---------------- –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ----------------
@router.callback_query(F.data.startswith("rename:"))
async def cb_rename_start(query: CallbackQuery, state: FSMContext, db: DB):
    """–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞."""
    nm_id = int(query.data.split(":", 1)[1])
    
    product = await db.get_product_by_nm(query.from_user.id, nm_id)
    if not product:
        await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(nm_id=nm_id, product_id=product.id)
    await state.set_state(RenameProductState.waiting_for_name)
    
    current_name = product.display_name
    
    await query.message.answer(
        f"‚úèÔ∏è <b>–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n<i>{current_name}</i>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="HTML"
    )
    await query.answer()


@router.message(RenameProductState.waiting_for_name)
async def process_rename(message: Message, state: FSMContext, db: DB):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""
    if message.text == "/cancel":
        await message.answer("‚ùå –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_inline_kb())
        await state.clear()
        return
    
    new_name = message.text.strip()
    
    if len(new_name) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)")
        return
    
    if len(new_name) > 200:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    data = await state.get_data()
    product_id = data.get("product_id")
    nm_id = data.get("nm_id")
    
    try:
        await db.set_custom_name(product_id, new_name)
        
        await message.answer(
            f"‚úÖ <b>–¢–æ–≤–∞—Ä –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω!</b>\n\n"
            f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n<i>{new_name}</i>",
            parse_mode="HTML",
            reply_markup=product_detail_kb(nm_id)
        )
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞",
            reply_markup=main_inline_kb()
        )
    
    await state.clear()


# ---------------- –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ----------------
@router.callback_query(F.data == "remove_product")
async def cb_start_remove(query: CallbackQuery, db: DB):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫."""
    products = await db.list_products(query.from_user.id)
    
    if not products:
        await query.answer("üì≠ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        return

    text = "üóë <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
    kb_buttons = []
    
    for i, p in enumerate(products, 1):
        display_name = p.display_name
        text += f'{i}. {display_name}\n'
        kb_buttons.append([
            {
                "text": f"‚ùå {display_name[:30]}...",
                "callback_data": f"rm:{p.nm_id}"
            }
        ])
    
    kb_buttons.append([{"text": "¬´ –ù–∞–∑–∞–¥", "callback_data": "back_to_menu"}])
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"])]
            for row in kb_buttons for btn in row
        ]
    )
    
    await query.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await query.answer()


@router.callback_query(F.data.startswith("rm:"))
async def cb_confirm_remove(query: CallbackQuery, db: DB):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""
    nm_id = int(query.data.split(":", 1)[1])
    
    product = await db.get_product_by_nm(query.from_user.id, nm_id)
    if not product:
        await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await query.message.edit_text(
        f"‚ùì <b>–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?</b>\n\n"
        f"üì¶ {product.display_name}\n"
        f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{nm_id}</code>\n\n"
        f"‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞.",
        reply_markup=confirm_remove_kb(nm_id),
        parse_mode="HTML"
    )
    await query.answer()


@router.callback_query(F.data.startswith("confirm_remove:"))
async def cb_remove(query: CallbackQuery, db: DB):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    nm_id = int(query.data.split(":", 1)[1])
    ok = await db.remove_product(query.from_user.id, nm_id)
    
    if ok:
        await query.message.edit_text(
            "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.",
            reply_markup=main_inline_kb()
        )
        await query.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω")
    else:
        await query.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω.",
            reply_markup=main_inline_kb()
        )
        await query.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)


@router.callback_query(F.data.startswith("back_to_product:"))
async def cb_back_to_product(query: CallbackQuery, db: DB):
    nm_id = int(query.data.split(":", 1)[1])
    product = await db.get_product_by_nm(query.from_user.id, nm_id)

    if not product:
        await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await query.message.delete()  # –£–±–∏—Ä–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    await query.message.answer(
        text=(
            f"üì¶ <b>{product.display_name}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: {int(product.last_product_price or 0)} ‚ÇΩ\n"
            f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{product.nm_id}</code>"
        ),
        parse_mode="HTML",
        reply_markup=product_detail_kb(product.nm_id)
    )

    await query.answer()


@router.callback_query(F.data == "back_to_menu")
async def cb_back_to_menu(query: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await query.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_inline_kb()
    )
    await query.answer()

