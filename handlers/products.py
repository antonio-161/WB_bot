from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from states.user_states import AddProductState, RenameProductState, SetNotifyState
from services.db import DB
from services.price_fetcher import PriceFetcher
from utils.wb_utils import extract_nm_id, apply_wallet_discount
from keyboards.kb import (
    products_inline, main_inline_kb, sizes_inline_kb,
    product_detail_kb, confirm_remove_kb, back_to_product_kb, notify_mode_kb,
    export_format_kb, onboarding_kb, upsell_kb, products_list_kb,
    remove_products_kb
)
from utils.decorators import require_plan
from utils.graph_generator import generate_price_graph
import logging
from utils.export_utils import generate_excel, generate_csv
from datetime import datetime

router = Router()
logger = logging.getLogger(__name__)


# ---------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ----------------
@router.callback_query(F.data == "add_product")
async def cb_add_product(query: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""
    await query.message.answer(
        "üìé <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries\n"
        "‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789)\n\n"
        "–õ–∏–º–∏—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞.",
        parse_mode="HTML"
    )
    await state.set_state(AddProductState.waiting_for_url)
    await query.answer()


@router.message(AddProductState.waiting_for_url)
async def add_url(message: Message, state: FSMContext, db: DB, price_fetcher: PriceFetcher):
    url_or_nm = message.text.strip()
    nm = extract_nm_id(url_or_nm)

    if not nm:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
            "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä WB\n"
            "‚Ä¢ –ê—Ä—Ç–∏–∫—É–ª (6-12 —Ü–∏—Ñ—Ä)"
        )
        return

    await db.ensure_user(message.from_user.id)
    user = await db.get_user(message.from_user.id)
    prods = await db.list_products(message.from_user.id)
    max_links = user.get("max_links", 5)

    if len(prods) >= max_links:
        await message.answer(
            f"‚õî –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ({max_links}) —Ç–æ–≤–∞—Ä–æ–≤.\n"
            "–£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.",
            reply_markup=main_inline_kb()
        )
        await state.clear()
        return

    status_msg = await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ...")

    try:
        product_data = await price_fetcher.get_product_data(nm)
        if not product_data:
            await status_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ.\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            await state.clear()
            return

        product_name = product_data.get("name", f"–¢–æ–≤–∞—Ä {nm}")
        sizes = product_data.get("sizes", [])

        # –§–æ—Ä–º–∏—Ä—É–µ–º URL —Ç–æ–≤–∞—Ä–∞
        url = f"https://www.wildberries.ru/catalog/{nm}/detail.aspx"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (–Ω–µ –ø—É—Å—Ç—ã–µ name –∏ origName)
        valid_sizes = []
        if sizes:
            valid_sizes = [
                s for s in sizes 
                if s.get("name") not in ("", "0", None)
                and s.get("origName") not in ("", "0", None)
            ]

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
        if valid_sizes:
            await state.update_data(url=url, nm=nm, product_name=product_name)

            await status_msg.edit_text(
                f"üì¶ <b>{product_name}</b>\n"
                f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{nm}</code>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:",
                reply_markup=sizes_inline_kb(nm, valid_sizes),
                parse_mode="HTML"
            )
            await state.set_state(AddProductState.waiting_for_size)
        else:
            # –¢–æ–≤–∞—Ä –±–µ–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
            product_id = await db.add_product(message.from_user.id, url, nm, product_name)
            if not product_id:
                await status_msg.edit_text(
                    "‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏.",
                    reply_markup=main_inline_kb()
                )
                await state.clear()
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            # –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ü–µ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–µ—Ä–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ sizes
            size_data = sizes[0] if sizes else {}
            price_info = size_data.get("price", {})
            price_basic = price_info.get("basic", 0)
            price_product = price_info.get("product", 0)
            qty = sum(stock.get("qty", 0) for stock in size_data.get("stocks", []))

            await db.update_prices_and_stock(
                product_id=product_id,
                basic=price_basic,
                product=price_product,
                last_qty=qty,
                out_of_stock=(qty == 0)
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            await db.add_price_history(product_id, price_basic, price_product, qty)

            # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            user = await db.get_user(message.from_user.id)
            discount = user.get("discount_percent", 0) if user else 0

            display_price = int(price_product)
            price_text = f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {display_price} ‚ÇΩ"

            if discount > 0:
                final_price = apply_wallet_discount(display_price, discount)
                price_text = f"üí∞ –¶–µ–Ω–∞: {display_price} ‚ÇΩ\nüí≥ –° –∫–æ—à–µ–ª—å–∫–æ–º ({discount}%): {int(final_price)} ‚ÇΩ"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
            data = await state.get_data()
            is_onboarding = data.get("onboarding", False)

            if is_onboarding:
                # –û–Ω–±–æ—Ä–¥–∏–Ω–≥: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω–Ω–æ—Å—Ç—å + –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–∞—Ä–∏—Ñ
                await status_msg.edit_text(
                    f"üéâ <b>–û—Ç–ª–∏—á–Ω–æ! –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω</b>\n\n"
                    f"üì¶ {product_name}\n"
                    f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{nm}</code>\n"
                    f"{price_text}\n\n"
                    "‚úÖ –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—É –∫–∞–∂–¥—ã–π –¥–µ–Ω—å\n"
                    "üîî –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏\n\n"
                    "üí° <b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>\n"
                    "üéÅ –£ –≤–∞—Å –µ—â—ë <b>4 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–ª–æ—Ç–∞</b>\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π üëá",
                    reply_markup=onboarding_kb(),
                    parse_mode="HTML"
                )
            else:
                # –û–±—ã—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                await status_msg.edit_text(
                    f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                    f"üì¶ {product_name}\n"
                    f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{nm}</code>\n"
                    f"{price_text}\n\n"
                    "–Ø –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã.",
                    reply_markup=main_inline_kb(),
                    parse_mode="HTML"
                )

            await state.clear()

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ {nm}: {e}")
        await status_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()


@router.callback_query(F.data.startswith("select_size:"), AddProductState.waiting_for_size)
async def select_size_cb(query: CallbackQuery, state: FSMContext, db: DB, price_fetcher: PriceFetcher):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–æ–≤–∞—Ä–∞."""
    try:
        _, nm_str, size_name = query.data.split(":", 2)
        nm = int(nm_str)
        user_id = query.from_user.id

        data = await state.get_data()
        url = data.get("url")
        product_name = data.get("product_name")

        if not url or not product_name:
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            await state.clear()
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        product_id = await db.add_product(user_id, url, nm, product_name)
        if not product_id:
            await query.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏.", show_alert=True)
            await state.clear()
            return

        await db.set_selected_size(product_id, size_name)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        product_data = await price_fetcher.get_product_data(nm)
        if product_data and product_data.get("sizes"):
            size_data = next((s for s in product_data["sizes"] if s["name"] == size_name), None)
            if size_data:
                price_info = size_data.get("price", {})
                price_basic = price_info.get("basic", 0)
                price_product = price_info.get("product", 0)
                qty = sum(stock.get("qty", 0) for stock in size_data.get("stocks", []))
                
                await db.update_prices_and_stock(
                    product_id=product_id,
                    basic=price_basic,
                    product=price_product,
                    last_qty=qty,
                    out_of_stock=(qty == 0)
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                await db.add_price_history(product_id, price_basic, price_product, qty)

        await query.message.edit_text(
            f"‚úÖ <b>–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
            f"üì¶ {product_name}\n"
            f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{nm}</code>\n"
            f"üîò –†–∞–∑–º–µ—Ä: <b>{size_name}</b>\n\n"
            "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
            parse_mode="HTML",
            reply_markup=main_inline_kb()
        )
        await query.answer("–†–∞–∑–º–µ—Ä –≤—ã–±—Ä–∞–Ω!")
        await state.clear()

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–º–µ—Ä–∞: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–º–µ—Ä–∞.", show_alert=True)
        await state.clear()


# ---------------- –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ----------------
@router.callback_query(F.data == "list_products")
async def cb_list_products(query: CallbackQuery, db: DB):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π."""
    
    products = await db.list_products(query.from_user.id)
    
    if not products:
        await query.message.edit_text(
            "üì≠ <b>–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç</b>\n\n"
            "–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n\n"
            "üí° –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —ç–∫–æ–Ω–æ–º–∏—Ç—å!",
            parse_mode="HTML",
            reply_markup=products_inline()
        )
        await query.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(query.from_user.id)
    discount = user.get("discount_percent", 0) if user else 0
    plan = user.get("plan", "plan_free")
    max_links = user.get("max_links", 5)
    
    # ===== –ê–ù–ê–õ–ò–¢–ò–ö–ê –¢–û–í–ê–†–û–í =====
    products_with_analytics = []
    total_current_price = 0
    total_potential_savings = 0
    best_deal = None
    best_deal_percent = 0
    
    for p in products:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        history = await db.get_price_history(p.id, limit=30)
        
        analytics = {
            "product": p,
            "trend": "neutral",  # up, down, neutral
            "savings_percent": 0,
            "savings_amount": 0,
            "has_history": len(history) >= 2
        }
        
        if len(history) >= 2:
            prices = [h.product_price for h in history]
            max_price = max(prices)
            min_price = min(prices)
            current_price = p.last_product_price or max_price
            
            # –†–∞—Å—á—ë—Ç —ç–∫–æ–Ω–æ–º–∏–∏
            savings = max_price - current_price
            if savings > 0 and max_price > 0:
                savings_percent = (savings / max_price) * 100
                analytics["savings_percent"] = savings_percent
                analytics["savings_amount"] = savings
                
                # –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞
                if savings_percent > best_deal_percent:
                    best_deal_percent = savings_percent
                    best_deal = p
            
            # –¢—Ä–µ–Ω–¥ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–∞–ø–∏—Å–∏)
            recent_prices = [h.product_price for h in history[:3]]
            if len(recent_prices) >= 2:
                if recent_prices[0] < recent_prices[-1]:
                    analytics["trend"] = "down"  # –¶–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç
                elif recent_prices[0] > recent_prices[-1]:
                    analytics["trend"] = "up"    # –¶–µ–Ω–∞ —Ä–∞—Å—Ç—ë—Ç
            
            total_potential_savings += savings
        
        if p.last_product_price:
            total_current_price += p.last_product_price
        
        products_with_analytics.append(analytics)
    
    # ===== –°–û–†–¢–ò–†–û–í–ö–ê –ü–û –í–´–ì–û–î–ù–û–°–¢–ò =====
    products_with_analytics.sort(
        key=lambda x: x["savings_percent"], 
        reverse=True
    )
    
    # ===== –§–û–†–ú–ò–†–£–ï–ú –°–û–û–ë–©–ï–ù–ò–ï =====
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    text = "üì¶ <b>–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã</b>\n"
    text += f"{'‚ïê'*25}\n\n"
    
    # –ú–∏–Ω–∏-–¥–∞—à–±–æ—Ä–¥
    text += f"üìä –¢–æ–≤–∞—Ä–æ–≤: <b>{len(products)}/{max_links}</b>\n"
    
    if discount > 0:
        total_with_discount = sum(
            apply_wallet_discount(p.last_product_price or 0, discount) 
            for p in products
        )
        text += f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total_with_discount}‚ÇΩ</b> (—Å WB –∫–æ—à–µ–ª—å–∫–æ–º)\n"
    else:
        text += f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total_current_price}‚ÇΩ</b>\n"
    
    if total_potential_savings > 0:
        text += f"üíé –ú–æ–∂–Ω–æ —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å: <b>{total_potential_savings}‚ÇΩ</b>\n"
    
    text += "\n"
    
    # –õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if best_deal:
        text += (
            f"üî• <b>–õ—É—á—à–∞—è —Å–¥–µ–ª–∫–∞ —Å–µ–π—á–∞—Å:</b>\n"
            f"{best_deal.display_name[:35]}...\n"
            f"‚îî –°–∫–∏–¥–∫–∞ {best_deal_percent:.0f}% –æ—Ç –ø–∏–∫–∞ —Ü–µ–Ω—ã!\n\n"
        )
    
    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
    text += "üìã <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n"
    text += "<i>–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –≤—ã–≥–æ–¥–Ω–æ—Å—Ç–∏</i>\n\n"
    
    # ===== –°–ü–ò–°–û–ö –¢–û–í–ê–†–û–í =====
    products_data = []
    
    for i, item in enumerate(products_with_analytics[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
        p = item["product"]
        
        # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
        if item["savings_percent"] >= 30:
            status_emoji = "üî•"
        elif item["savings_percent"] >= 15:
            status_emoji = "üí∞"
        elif item["trend"] == "down":
            status_emoji = "üìâ"
        elif item["trend"] == "up":
            status_emoji = "üìà"
        else:
            status_emoji = "üì¶"
        
        # –ù–∞–ª–∏—á–∏–µ
        stock_emoji = "‚úÖ" if not p.out_of_stock else "‚ùå"
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ
        display_name = p.display_name[:30]
        if len(p.display_name) > 30:
            display_name += "..."
        
        # –¶–µ–Ω–∞
        if p.last_product_price:
            if discount > 0:
                final_price = apply_wallet_discount(p.last_product_price, discount)
                price_str = f"{final_price}‚ÇΩ"
            else:
                price_str = f"{p.last_product_price}‚ÇΩ"
        else:
            price_str = "‚Äî"
        
        # –≠–∫–æ–Ω–æ–º–∏—è
        if item["savings_percent"] > 0:
            savings_str = f" (-{item['savings_percent']:.0f}%)"
        else:
            savings_str = ""
        
        text += f"{status_emoji} <b>{i}.</b> {display_name}\n"
        text += f"   {stock_emoji} {price_str}{savings_str}\n"
        
        products_data.append({
            "nm_id": p.nm_id,
            "name": display_name
        })
    
    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –±–æ–ª—å—à–µ 10
    if len(products_with_analytics) > 10:
        text += f"\n<i>... –∏ –µ—â—ë {len(products_with_analytics) - 10} —Ç–æ–≤–∞—Ä–æ–≤</i>\n"
    
    # ===== –ü–û–î–°–ö–ê–ó–ö–ò –ò –ú–û–¢–ò–í–ê–¶–ò–Ø =====
    text += "\nüí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∏:</b>\n"
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –Ω–∞–ª–∏—á–∏–∏
    out_of_stock_count = sum(1 for p in products if p.out_of_stock)
    if out_of_stock_count > 0:
        text += f"‚Ä¢ {out_of_stock_count} —Ç–æ–≤–∞—Ä(–æ–≤) –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏\n"
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ –ª–∏–º–∏—Ç–µ
    if plan == "plan_free" and len(products) >= max_links - 1:
        text += f"‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å {max_links - len(products)} —Å–ª–æ—Ç(–æ–≤)\n"
    
    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –æ–± –∞–ø–≥—Ä–µ–π–¥–µ
    if plan == "plan_free" and len(products) >= 3:
        text += "‚Ä¢ üíé –£–ª—É—á—à–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ 50 —Ç–æ–≤–∞—Ä–æ–≤\n"
    
    # ===== –ö–ù–û–ü–ö–ò –î–ï–ô–°–¢–í–ò–ô =====
    keyboard_rows = []
    
    # –§–∏–ª—å—Ç—Ä—ã (–¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤)
    if plan in ["plan_basic", "plan_pro"]:
        keyboard_rows.append([
            InlineKeyboardButton(
                text="üî• –õ—É—á—à–∏–µ —Å–∫–∏–¥–∫–∏",
                callback_data="filter_best_deals"
            ),
            InlineKeyboardButton(
                text="üìâ –ü–∞–¥–∞—é—â–∏–µ —Ü–µ–Ω—ã",
                callback_data="filter_price_drops"
            )
        ])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    products_data = [
        {'nm_id': p.nm_id, 'display_name': p.display_name}
        for p in products
    ]

    await query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=products_list_kb(
            products=products_data,
            has_filters=(plan in ["plan_basic", "plan_pro"]),
            show_export=(plan == "plan_pro"),
            show_upgrade=(plan == "plan_free" and len(products) >= 3)
        )
    )


# ===== –§–ò–õ–¨–¢–†–´ =====

@router.callback_query(F.data == "filter_best_deals")
@require_plan(['plan_basic', 'plan_pro'], "‚õî –§–∏–ª—å—Ç—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö")
async def filter_best_deals(query: CallbackQuery, db: DB):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –ª—É—á—à–∏–º–∏ —Å–∫–∏–¥–∫–∞–º–∏."""
    
    products = await db.list_products(query.from_user.id)
    user = await db.get_user(query.from_user.id)
    discount = user.get("discount_percent", 0) if user else 0
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Å–æ —Å–∫–∏–¥–∫–æ–π >= 15%
    filtered = []
    for p in products:
        history = await db.get_price_history(p.id, limit=30)
        if len(history) >= 2:
            prices = [h.product_price for h in history]
            max_price = max(prices)
            current = p.last_product_price or max_price
            
            if max_price > 0:
                savings_percent = ((max_price - current) / max_price) * 100
                if savings_percent >= 15:
                    filtered.append((p, savings_percent))
    
    if not filtered:
        await query.answer(
            "üòî –°–µ–π—á–∞—Å –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–∫–∏–¥–∫–∞–º–∏.\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥!",
            show_alert=True
        )
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–∏–¥–∫–µ
    filtered.sort(key=lambda x: x[1], reverse=True)
    
    text = (
        "üî• <b>–õ—É—á—à–∏–µ —Å–∫–∏–¥–∫–∏ —Å–µ–π—á–∞—Å</b>\n"
        f"{'‚ïê'*25}\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <b>{len(filtered)}</b>\n\n"
    )
    
    products_data = []
    for i, (p, savings_percent) in enumerate(filtered[:15], 1):
        display_name = p.display_name[:35]
        if len(p.display_name) > 35:
            display_name += "..."
        
        if p.last_product_price:
            if discount > 0:
                final_price = apply_wallet_discount(p.last_product_price, discount)
                price_str = f"{final_price}‚ÇΩ"
            else:
                price_str = f"{p.last_product_price}‚ÇΩ"
        else:
            price_str = "‚Äî"
        
        text += (
            f"üî• <b>{i}.</b> {display_name}\n"
            f"   üí∞ {price_str} <b>(-{savings_percent:.0f}%)</b>\n"
        )
        
        products_data.append({"nm_id": p.nm_id, "name": display_name})
    
    text += "\nüí° –û—Ç–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏!"
    
    await query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=products_inline(products_data)
    )
    await query.answer()


@router.callback_query(F.data == "filter_price_drops")
@require_plan(['plan_basic', 'plan_pro'], "‚õî –§–∏–ª—å—Ç—Ä—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö")
async def filter_price_drops(query: CallbackQuery, db: DB):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –ø–∞–¥–∞—é—â–∏–º–∏ —Ü–µ–Ω–∞–º–∏."""
    
    products = await db.list_products(query.from_user.id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã —Å –ø–∞–¥–∞—é—â–∏–º —Ç—Ä–µ–Ω–¥–æ–º
    filtered = []
    for p in products:
        history = await db.get_price_history(p.id, limit=7)
        if len(history) >= 3:
            prices = [h.product_price for h in history]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–µ–Ω–¥
            if prices[0] < prices[-1]:  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –Ω–∏–∂–µ –ø–µ—Ä–≤–æ–π
                drop = prices[-1] - prices[0]
                filtered.append((p, drop))
    
    if not filtered:
        await query.answer(
            "üìà –°–µ–π—á–∞—Å —Ü–µ–Ω—ã —Å—Ç–∞–±–∏–ª—å–Ω—ã –∏–ª–∏ —Ä–∞—Å—Ç—É—Ç.\n"
            "–°–ª–µ–¥–∏–º –¥–∞–ª—å—à–µ!",
            show_alert=True
        )
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ–ª–∏—á–∏–Ω–µ –ø–∞–¥–µ–Ω–∏—è
    filtered.sort(key=lambda x: x[1], reverse=True)
    
    text = (
        "üìâ <b>–¶–µ–Ω—ã –ø–∞–¥–∞—é—Ç</b>\n"
        f"{'‚ïê'*25}\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <b>{len(filtered)}</b>\n\n"
    )
    
    products_data = []
    for i, (p, drop) in enumerate(filtered[:15], 1):
        display_name = p.display_name[:35]
        if len(p.display_name) > 35:
            display_name += "..."
        
        text += (
            f"üìâ <b>{i}.</b> {display_name}\n"
            f"   ‚Üì –ü–∞–¥–µ–Ω–∏–µ: <b>{drop}‚ÇΩ</b> –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        )
        
        products_data.append({"nm_id": p.nm_id, "name": display_name})
    
    text += "\nüí° –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å –µ—â—ë!"
    
    await query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=products_inline(products_data)
    )
    await query.answer()


@router.callback_query(F.data == "show_detailed_list")
async def show_detailed_list(query: CallbackQuery, db: DB):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""
    
    products = await db.list_products(query.from_user.id)
    
    products_data = []
    for p in products:
        products_data.append({
            "nm_id": p.nm_id,
            "name": p.display_name
        })
    
    text = (
        "üìã <b>–í—Å–µ —Ç–æ–≤–∞—Ä—ã</b>\n"
        f"{'‚ïê'*25}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
    )
    
    await query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=products_inline(products_data)
    )
    await query.answer()


@router.callback_query(F.data == "upsell_from_products_list")
async def upsell_from_products_list(query: CallbackQuery, db: DB):
    """Upsell —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤."""
    
    user = await db.get_user(query.from_user.id)
    products = await db.list_products(query.from_user.id)
    
    additional_slots = 50 - len(products)
    
    await query.message.edit_text(
        f"üöÄ <b>–†–∞—Å—à–∏—Ä—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!</b>\n\n"
        f"üì¶ –°–µ–π—á–∞—Å: <b>{len(products)}/5</b> —Ç–æ–≤–∞—Ä–æ–≤\n\n"
        "üòî <b>–ß—Ç–æ –≤—ã —É–ø—É—Å–∫–∞–µ—Ç–µ:</b>\n"
        "‚ùå –ù–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ç–æ–≤–∞—Ä–æ–≤\n"
        "‚ùå –ò—Å—Ç–æ—Ä–∏—è —Ç–æ–ª—å–∫–æ –∑–∞ –º–µ—Å—è—Ü\n"
        "‚ùå –ë–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
        f"‚úÖ <b>–° —Ç–∞—Ä–∏—Ñ–æ–º –ë–∞–∑–æ–≤—ã–π:</b>\n"
        f"‚Ä¢ –ï—â—ë <b>+{additional_slots} —Å–ª–æ—Ç–æ–≤</b>\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∑–∞ 3 –º–µ—Å—è—Ü–∞\n"
        "‚Ä¢ –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
        "‚Ä¢ –í–∞—à –ü–í–ó\n\n"
        "üí∞ –í—Å–µ–≥–æ 199‚ÇΩ/–º–µ—Å ‚Äî –æ–∫—É–ø–∞–µ—Ç—Å—è —Å 1 –ø–æ–∫—É–ø–∫–∏!",
        parse_mode="HTML",
        reply_markup=upsell_kb()
    )
    await query.answer()


# ---------------- –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ ----------------
@router.callback_query(F.data == "product_detail")
async def cb_product_detail(query: CallbackQuery, db: DB):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ."""
    nm_id = int(query.data.split(":", 1)[1])
    
    product = await db.get_product_by_nm(query.from_user.id, nm_id)
    if not product:
        await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user(query.from_user.id)
    discount = user.get("discount_percent", 0) if user else 0
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    history = await db.get_price_history(product.id, limit=100)
    
    text = f"üì¶ <b>{product.display_name}</b>\n\n"
    text += f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{nm_id}</code>\n"
    
    if product.selected_size:
        text += f"üîò –†–∞–∑–º–µ—Ä: <b>{product.selected_size}</b>\n"
    
    if product.last_product_price:
        price = product.last_product_price
        if discount > 0:
            final_price = apply_wallet_discount(price, discount)
            text += f"üí∞ –¶–µ–Ω–∞: {price} ‚ÇΩ\n"
            text += f"üí≥ –° –∫–æ—à–µ–ª—å–∫–æ–º ({discount}%): <b>{final_price} ‚ÇΩ</b>\n"
        else:
            text += f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{price} ‚ÇΩ</b>\n"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞—Ä–∏—Ñ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Å—Ç–∞—Ç–∫–æ–≤
    if product.last_qty is not None:
        if user and user.get("plan") == "plan_pro":
            # –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if product.out_of_stock:
                text += "üì¶ –û—Å—Ç–∞—Ç–æ–∫: <b>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n"
            else:
                text += f"üì¶ –û—Å—Ç–∞—Ç–æ–∫: <b>{product.last_qty} —à—Ç.</b>\n"
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤ ‚Äî —Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–∏–µ/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ
            if product.out_of_stock:
                text += f"üì¶ <b>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</b>\n"
            else:
                text += f"üì¶ <b>–í –Ω–∞–ª–∏—á–∏–∏</b>\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    if history:
        prices = [h.product_price for h in history]
        min_price = min(prices)
        max_price = max(prices)
        text += f"\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"

        if discount > 0:
            min_with_discount = apply_wallet_discount(min_price, discount)
            max_with_discount = apply_wallet_discount(max_price, discount)
            text += f"‚Ä¢ –ú–∏–Ω. —Ü–µ–Ω–∞: {min_price} ‚ÇΩ (—Å WB –∫–æ—à–µ–ª—å–∫–æ–º {min_with_discount} ‚ÇΩ)\n"
            text += f"‚Ä¢ –ú–∞–∫—Å. —Ü–µ–Ω–∞: {max_price} ‚ÇΩ (—Å WB –∫–æ—à–µ–ª—å–∫–æ–º {max_with_discount} ‚ÇΩ)\n"
        else:
            text += f"‚Ä¢ –ú–∏–Ω. —Ü–µ–Ω–∞: {min_price} ‚ÇΩ\n"
            text += f"‚Ä¢ –ú–∞–∫—Å. —Ü–µ–Ω–∞: {max_price} ‚ÇΩ\n"

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if product.notify_mode == "percent":
        text += f"\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ –Ω–∞ {product.notify_value}%"
    elif product.notify_mode == "threshold":
        text += f"\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –ø—Ä–∏ —Ü–µ–Ω–µ ‚â§ {product.notify_value} ‚ÇΩ"
    else:
        text += "\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã"

    text += f"\nüïê –î–æ–±–∞–≤–ª–µ–Ω: {product.created_at.strftime('%d.%m.%Y %H:%M')}"

    await query.message.edit_text(
        text,
        reply_markup=product_detail_kb(nm_id),
        parse_mode="HTML"
    )
    await query.answer()


# ---------------- –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω ----------------
@router.callback_query(F.data.startswith("show_graph:"))
async def cb_show_graph(query: CallbackQuery, db: DB):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã."""
    nm_id = int(query.data.split(":", 1)[1])

    product = await db.get_product_by_nm(query.from_user.id, nm_id)
    if not product:
        await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    history = await db.get_price_history(product.id, limit=100)

    if len(history) < 2:
        await query.answer(
            "üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.\n"
            "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∑–∞–ø–∏—Å–∏ —Ü–µ–Ω.",
            show_alert=True
        )
        return

    await query.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_user(query.from_user.id)
        discount = user.get("discount_percent", 0) if user else 0

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        graph_buffer = await generate_price_graph(history, product.display_name, discount)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
        photo = BufferedInputFile(graph_buffer.read(), filename=f"price_graph_{nm_id}.png")

        caption = (
            f"üìà <b>–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω</b>\n\n"
            f"üì¶ {product.display_name}\n"
            f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{nm_id}</code>\n"
            f"üìä –ó–∞–ø–∏—Å–µ–π: {len(history)}"
        )

        await query.message.answer_photo(
            photo=photo,
            caption=caption,
            parse_mode="HTML",
            reply_markup=back_to_product_kb(nm_id)
        )

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è {nm_id}: {e}")
        await query.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


# ---------------- –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ----------------
@router.callback_query(F.data.startswith("rename:"))
@require_plan(['plan_basic', 'plan_pro'], "‚õî –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö")
async def cb_rename_start(query: CallbackQuery, state: FSMContext, db: DB):
    """–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞."""
    nm_id = int(query.data.split(":", 1)[1])
    
    product = await db.get_product_by_nm(query.from_user.id, nm_id)
    if not product:
        await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(nm_id=nm_id, product_id=product.id)
    await state.set_state(RenameProductState.waiting_for_name)
    
    current_name = product.display_name
    
    await query.message.answer(
        f"‚úèÔ∏è <b>–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n<i>{current_name}</i>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="HTML"
    )
    await query.answer()


@router.message(RenameProductState.waiting_for_name)
async def process_rename(message: Message, state: FSMContext, db: DB):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""
    if message.text == "/cancel":
        await message.answer("‚ùå –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_inline_kb())
        await state.clear()
        return
    
    new_name = message.text.strip()
    
    if len(new_name) < 3:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)")
        return
    
    if len(new_name) > 200:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)")
        return
    
    data = await state.get_data()
    product_id = data.get("product_id")
    nm_id = data.get("nm_id")
    
    try:
        await db.set_custom_name(product_id, new_name)
        
        await message.answer(
            f"‚úÖ <b>–¢–æ–≤–∞—Ä –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω!</b>\n\n"
            f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n<i>{new_name}</i>",
            parse_mode="HTML",
            reply_markup=product_detail_kb(nm_id)
        )
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ {product_id}: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞",
            reply_markup=main_inline_kb()
        )
    
    await state.clear()


# ---------------- –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ----------------
@router.callback_query(F.data == "remove_product")
async def cb_start_remove(query: CallbackQuery, db: DB):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫."""
    products = await db.list_products(query.from_user.id)
    
    if not products:
        await query.answer("üì≠ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    products_data = [
        {'nm_id': p.nm_id, 'display_name': p.display_name}
        for p in products
    ]
    
    text = (
        "üóë <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
        f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}"
    )

    await query.message.edit_text(
        text,
        reply_markup=remove_products_kb(products_data),
        parse_mode="HTML"
    )
    await query.answer()


@router.callback_query(F.data.startswith("rm:"))
async def cb_confirm_remove(query: CallbackQuery, db: DB):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."""
    nm_id = int(query.data.split(":", 1)[1])
    
    product = await db.get_product_by_nm(query.from_user.id, nm_id)
    if not product:
        await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await query.message.edit_text(
        f"‚ùì <b>–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?</b>\n\n"
        f"üì¶ {product.display_name}\n"
        f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{nm_id}</code>\n\n"
        f"‚ö†Ô∏è –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞.",
        reply_markup=confirm_remove_kb(nm_id),
        parse_mode="HTML"
    )
    await query.answer()


@router.callback_query(F.data.startswith("confirm_remove:"))
async def cb_remove(query: CallbackQuery, db: DB):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    nm_id = int(query.data.split(":", 1)[1])
    ok = await db.remove_product(query.from_user.id, nm_id)
    
    if ok:
        await query.message.edit_text(
            "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.",
            reply_markup=main_inline_kb()
        )
        await query.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω")
    else:
        await query.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω.",
            reply_markup=main_inline_kb()
        )
        await query.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)


@router.callback_query(F.data.startswith("back_to_product:"))
async def cb_back_to_product(query: CallbackQuery, db: DB):
    nm_id = int(query.data.split(":", 1)[1])
    product = await db.get_product_by_nm(query.from_user.id, nm_id)

    if not product:
        await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await query.message.delete()  # –£–±–∏—Ä–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    await query.message.answer(
        text=(
            f"üì¶ <b>{product.display_name}</b>\n"
            f"üí∞ –¶–µ–Ω–∞: {int(product.last_product_price or 0)} ‚ÇΩ\n"
            f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: <code>{product.nm_id}</code>"
        ),
        parse_mode="HTML",
        reply_markup=product_detail_kb(product.nm_id)
    )

    await query.answer()


@router.callback_query(F.data == "back_to_menu")
async def cb_back_to_menu(query: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await query.message.edit_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="HTML",
        reply_markup=main_inline_kb()
    )
    await query.answer()



# ---------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ----------------
@router.callback_query(F.data.startswith("notify_settings:"))
@require_plan(['plan_basic', 'plan_pro'], "‚õî –ì–∏–±–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —Å —Ç–∞—Ä–∏—Ñ–∞ –ë–∞–∑–æ–≤—ã–π")
async def cb_notify_settings(query: CallbackQuery, db: DB):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""

    nm_id = int(query.data.split(":", 1)[1])
    
    product = await db.get_product_by_nm(query.from_user.id, nm_id)
    if not product:
        await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    current_settings = "–í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã"
    if product.notify_mode == "percent":
        current_settings = f"–ü—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ –Ω–∞ {product.notify_value}%"
    elif product.notify_mode == "threshold":
        current_settings = f"–ü—Ä–∏ —Ü–µ–Ω–µ ‚â§ {product.notify_value} ‚ÇΩ"
    
    await query.message.edit_text(
        f"üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        f"üì¶ {product.display_name}\n\n"
        f"–¢–µ–∫—É—â–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: <b>{current_settings}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        parse_mode="HTML",
        reply_markup=notify_mode_kb(nm_id)
    )
    await query.answer()


@router.callback_query(F.data.startswith("notify_percent:"))
async def cb_notify_percent(query: CallbackQuery, state: FSMContext, db: DB):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–Ω–∏–∂–µ–Ω–∏—è."""
    nm_id = int(query.data.split(":", 1)[1])
    
    product = await db.get_product_by_nm(query.from_user.id, nm_id)
    if not product:
        await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(nm_id=nm_id, product_id=product.id, notify_mode="percent")
    await state.set_state(SetNotifyState.waiting_for_value)
    
    await query.message.answer(
        f"üìä <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ —Å–Ω–∏–∂–µ–Ω–∏—è</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>3</code> –∏–ª–∏ <code>10</code>)\n\n"
        f"–ü—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏–ª–∏ –±–æ–ª—å—à–µ ‚Äî –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="HTML"
    )
    await query.answer()


@router.callback_query(F.data.startswith("notify_threshold:"))
async def cb_notify_threshold(query: CallbackQuery, state: FSMContext, db: DB):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã."""
    nm_id = int(query.data.split(":", 1)[1])
    
    product = await db.get_product_by_nm(query.from_user.id, nm_id)
    if not product:
        await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(nm_id=nm_id, product_id=product.id, notify_mode="threshold")
    await state.set_state(SetNotifyState.waiting_for_value)
    
    current_price = product.last_product_price or 0
    
    await query.message.answer(
        f"üí∞ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–Ω—ã</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {current_price} ‚ÇΩ\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é —Ü–µ–Ω—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>3000</code>)\n\n"
        f"–ö–æ–≥–¥–∞ —Ü–µ–Ω–∞ —Å—Ç–∞–Ω–µ—Ç —Ä–∞–≤–Ω–∞ –∏–ª–∏ –Ω–∏–∂–µ ‚Äî –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="HTML"
    )
    await query.answer()


@router.callback_query(F.data.startswith("notify_all:"))
async def cb_notify_all(query: CallbackQuery, db: DB):
    """–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    nm_id = int(query.data.split(":", 1)[1])

    product = await db.get_product_by_nm(query.from_user.id, nm_id)
    if not product:
        await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    await db.set_notify_settings(product.id, None, None)

    await query.message.edit_text(
        f"‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã</b>\n\n"
        f"üì¶ {product.display_name}\n\n"
        f"üîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ <b>–≤—Å–µ—Ö</b> –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω—ã.",
        parse_mode="HTML",
        reply_markup=product_detail_kb(nm_id)
    )
    await query.answer("–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã")


@router.message(SetNotifyState.waiting_for_value)
async def process_notify_value(message: Message, state: FSMContext, db: DB):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–ø—Ä–æ—Ü–µ–Ω—Ç –∏–ª–∏ –ø–æ—Ä–æ–≥)."""
    if message.text == "/cancel":
        await message.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_inline_kb())
        await state.clear()
        return

    try:
        value = int(message.text.strip())
        if value <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ")
        return

    data = await state.get_data()
    product_id = data.get("product_id")
    nm_id = data.get("nm_id")
    notify_mode = data.get("notify_mode")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
    if notify_mode == "percent" and value > 100:
        await message.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100")
        return

    try:
        await db.set_notify_settings(product_id, notify_mode, value)

        if notify_mode == "percent":
            msg = f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ —Ü–µ–Ω—ã –Ω–∞ <b>{value}%</b> –∏ –±–æ–ª–µ–µ."
        else:
            msg = f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ —Å—Ç–∞–Ω–µ—Ç <b>{value} ‚ÇΩ</b> –∏–ª–∏ –Ω–∏–∂–µ."

        await message.answer(
            msg,
            parse_mode="HTML",
            reply_markup=product_detail_kb(nm_id)
        )

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫",
            reply_markup=main_inline_kb()
        )

    await state.clear()


# ---------------- –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö ----------------
@router.callback_query(F.data == "export_menu")
@require_plan(['plan_pro'], "‚õî –≠–∫—Å–ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–∞—Ä–∏—Ñ–µ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π")
async def cb_export_menu(query: CallbackQuery, db: DB):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞."""
    products = await db.list_products(query.from_user.id)
    
    if not products:
        await query.answer("üì≠ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
        return
    
    await query.message.edit_text(
        f"üìä <b>–≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
        f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {len(products)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:",
        parse_mode="HTML",
        reply_markup=export_format_kb()
    )
    await query.answer()


@router.callback_query(F.data == "export_excel")
@require_plan(['plan_pro'], "‚õî –≠–∫—Å–ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–∞—Ä–∏—Ñ–µ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π")
async def cb_export_excel(query: CallbackQuery, db: DB):
    """–í—ã–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Excel."""
    products = await db.list_products(query.from_user.id)
    
    if not products:
        await query.answer("üì≠ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
        return
    
    await query.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é —Ñ–∞–π–ª...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_user(query.from_user.id)
        discount = user.get("discount_percent", 0) if user else 0
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel
        excel_buffer = await generate_excel(products, discount)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"wb_products_{timestamp}.xlsx"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        document = BufferedInputFile(excel_buffer.read(), filename=filename)
        
        caption = (
            f"üìä <b>–≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(products)}\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        if discount > 0:
            caption += f"\nüí≥ –° —É—á—ë—Ç–æ–º —Å–∫–∏–¥–∫–∏ –∫–æ—à–µ–ª—å–∫–∞: {discount}%"
        
        await query.message.answer_document(
            document=document,
            caption=caption,
            parse_mode="HTML"
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ Excel")
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ Excel: {e}")
        await query.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.callback_query(F.data == "export_csv")
@require_plan(['plan_pro'], "‚õî –≠–∫—Å–ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–∞—Ä–∏—Ñ–µ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π")
async def cb_export_csv(query: CallbackQuery, db: DB):
    """–í—ã–≥—Ä—É–∑–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ CSV."""
    products = await db.list_products(query.from_user.id)
    
    if not products:
        await query.answer("üì≠ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞", show_alert=True)
        return
    
    await query.answer("‚è≥ –§–æ—Ä–º–∏—Ä—É—é —Ñ–∞–π–ª...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_user(query.from_user.id)
        discount = user.get("discount_percent", 0) if user else 0
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV
        csv_buffer = await generate_csv(products, discount)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"wb_products_{timestamp}.csv"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        document = BufferedInputFile(csv_buffer.read(), filename=filename)
        
        caption = (
            f"üìä <b>–≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–≤–∞—Ä–æ–≤ (CSV)</b>\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(products)}\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        if discount > 0:
            caption += f"\nüí≥ –° —É—á—ë—Ç–æ–º —Å–∫–∏–¥–∫–∏ –∫–æ—à–µ–ª—å–∫–∞: {discount}%"
        
        await query.message.answer_document(
            document=document,
            caption=caption,
            parse_mode="HTML"
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {query.from_user.id} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –≤ CSV")
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –≤ CSV: {e}")
        await query.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
