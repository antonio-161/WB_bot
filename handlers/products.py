from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states.user_states import AddProductState
from services.db import DB
from services.price_fetcher import PriceFetcher
from utils.wb_utils import extract_nm_id
from keyboards.kb import products_inline, main_inline_kb, sizes_inline_kb
from decimal import Decimal
import logging

router = Router()
logger = logging.getLogger(__name__)


# ---------------- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ----------------
@router.callback_query(F.data == "add_product")
async def cb_add_product(query: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ InlineKeyboard."""
    await query.message.answer(
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä Wildberries –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.\n"
        "–õ–∏–º–∏—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞."
    )
    await state.set_state(AddProductState.waiting_for_url)
    await query.answer()


@router.message(AddProductState.waiting_for_url)
async def add_url(message: Message, state: FSMContext, db: DB, price_fetcher: PriceFetcher):
    url = message.text.strip()
    nm = extract_nm_id(url)

    if not nm:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—Ä—Ç–∏–∫—É–ª –∏–∑ —Å—Å—ã–ª–∫–∏ WB. –ü—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    await db.ensure_user(message.from_user.id)
    user = await db.get_user(message.from_user.id)
    prods = await db.list_products(message.from_user.id)
    max_links = user.get("max_links", 5)

    if len(prods) >= max_links:
        await message.answer(
            f"‚õî –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ({max_links}) —Ç–æ–≤–∞—Ä–æ–≤.\n–£–¥–∞–ª–∏—Ç–µ —Å—Ç–∞—Ä—ã–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Ç–∞—Ä–∏—Ñ.",
            reply_markup=main_inline_kb()
        )
        await state.clear()
        return

    status_msg = await message.answer("‚è≥ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ...")

    try:
        product_data = await price_fetcher.get_product_data(nm)
        if not product_data:
            await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            await state.clear()
            return

        product_name = product_data.get("name", f"–¢–æ–≤–∞—Ä {nm}")
        sizes = product_data.get("sizes", [])

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä—ã ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞
        if sizes:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ FSM
            await state.update_data(url=url, nm=nm, product_name=product_name)
            valid_sizes = [s for s in sizes if s.get("name") not in ("", "0") and s.get("origName") not in ("", "0")]

            await status_msg.edit_text(
                f"üì¶ <b>{product_name}</b>\n"
                f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: {nm}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:",
                reply_markup=sizes_inline_kb(nm, valid_sizes),
                parse_mode="HTML"
            )
            await state.set_state(AddProductState.waiting_for_size)
        else:
            # –¢–æ–≤–∞—Ä –±–µ–∑ —Ä–∞–∑–º–µ—Ä–æ–≤ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–∑—É
            product_id = await db.add_product(message.from_user.id, url, nm, product_name)
            if not product_id:
                await status_msg.edit_text("‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏.", reply_markup=main_inline_kb())
                await state.clear()
                return

            await db.update_prices(
                product_id=product_id,
                basic=Decimal(str(product_data["price"]["basic"])),
                product=Decimal(str(product_data["price"]["product"]))
            )

            await status_msg.edit_text(
                f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üì¶ {product_name}\n"
                f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: {nm}\n"
                f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {product_data['price']['product']:.2f} ‚ÇΩ\n\n"
                "–Ø –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã.",
                reply_markup=main_inline_kb()
            )
            await state.clear()

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ {nm}: {e}")
        await status_msg.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()

# ---------------- –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ ----------------
@router.callback_query(F.data == "list_products")
async def cb_list_products(query: CallbackQuery, db: DB):
    """–°–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ —á–µ—Ä–µ–∑ InlineKeyboard."""
    products = await db.list_products(query.from_user.id)
    
    if not products:
        await query.message.edit_text(
            "üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.\n"
            "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è!",
            reply_markup=main_inline_kb()
        )
        await query.answer()
        return

    text = "üì¶ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Ç–æ–≤–∞—Ä—ã:</b>\n\n"
    products_data = []
    
    for i, p in enumerate(products, 1):
        price_info = ""
        if p.last_product_price:
            price_info = f" ‚Äî {float(p.last_product_price):.2f} ‚ÇΩ"
        
        text += f'{i}. <a href="{p.url_product}">{p.name_product}</a>{price_info}\n'
        products_data.append({"nm_id": p.nm_id, "name": p.name_product})

    await query.message.edit_text(
        text,
        reply_markup=products_inline(products_data),
        parse_mode="HTML",
        disable_web_page_preview=True
    )
    await query.answer()


# ---------------- –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ ----------------
@router.callback_query(F.data == "remove_product")
async def cb_start_remove(query: CallbackQuery, db: DB):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫."""
    products = await db.list_products(query.from_user.id)
    
    if not products:
        await query.answer("üì≠ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)
        return

    text = "üóë <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n"
    kb_buttons = []
    
    for i, p in enumerate(products, 1):
        text += f'{i}. {p.name_product}\n'
        kb_buttons.append([
            {
                "text": f"‚ùå {p.name_product[:30]}...",
                "callback_data": f"rm:{p.nm_id}"
            }
        ])
    
    kb_buttons.append([{"text": "¬´ –ù–∞–∑–∞–¥", "callback_data": "back_to_menu"}])
    
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=btn["text"], callback_data=btn["callback_data"])]
            for row in kb_buttons for btn in row
        ]
    )
    
    await query.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await query.answer()


@router.callback_query(F.data.startswith("rm:"))
async def cb_remove(query: CallbackQuery, db: DB):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —á–µ—Ä–µ–∑ InlineKeyboard."""
    nm = int(query.data.split(":", 1)[1])
    ok = await db.remove_product(query.from_user.id, nm)
    
    if ok:
        await query.message.edit_text(
            "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.",
            reply_markup=main_inline_kb()
        )
        await query.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω")
    else:
        await query.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä.\n"
            "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª —É–¥–∞–ª—ë–Ω.",
            reply_markup=main_inline_kb()
        )
        await query.answer("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è", show_alert=True)


@router.callback_query(lambda c: c.data and c.data.startswith("select_size:"), AddProductState.waiting_for_size)
async def select_size_cb(query: CallbackQuery, state: FSMContext, db: DB):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ç–æ–≤–∞—Ä–∞."""
    try:
        _, nm_str, size_name = query.data.split(":")
        nm = int(nm_str)
        user_id = query.from_user.id

        data = await state.get_data()
        url = data.get("url")
        product_name = data.get("product_name")

        if not url or not product_name:
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –∑–∞–Ω–æ–≤–æ.", show_alert=True)
            await state.clear()
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        product_id = await db.add_product(user_id, url, nm, product_name)
        if not product_id:
            await query.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏.", show_alert=True)
            await state.clear()
            return

        await db.set_selected_size(product_id, size_name)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã
        product_data = await PriceFetcher().get_product_data(nm)
        if product_data and product_data.get("sizes"):
            size_data = next((s for s in product_data["sizes"] if s["name"] == size_name), None)
            if size_data:
                await db.update_prices(
                    product_id=product_id,
                    basic=Decimal(str(size_data["price"]["basic"])),
                    product=Decimal(str(size_data["price"]["product"]))
                )

        await query.message.edit_text(
            f"‚úÖ –¢–æ–≤–∞—Ä <b>{product_name}</b>\n"
            f"üî¢ –ê—Ä—Ç–∏–∫—É–ª: {nm}\n"
            f"üîò –†–∞–∑–º–µ—Ä –≤—ã–±—Ä–∞–Ω: <b>{size_name}</b>\n\n"
            "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—ã –∏ –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.",
            parse_mode="HTML",
            reply_markup=main_inline_kb()
        )
        await query.answer("–†–∞–∑–º–µ—Ä –≤—ã–±—Ä–∞–Ω!")
        await state.clear()

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–º–µ—Ä–∞: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–∑–º–µ—Ä–∞.", show_alert=True)
        await state.clear()


@router.callback_query(F.data == "back_to_menu")
async def cb_back_to_menu(query: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await query.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=main_inline_kb()
    )
    await query.answer()
