"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞.
"""
import logging

from datetime import datetime

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, Filter

from keyboards.kb import admin_menu_kb, back_to_admin_menu_kb, user_management_kb, plan_selection_kb
from services.db import DB
from config import settings
from utils.error_tracker import get_error_tracker
from utils.health_monitor import get_health_monitor

router = Router()
logger = logging.getLogger(__name__)


# ============= –§–ò–õ–¨–¢–†–´ =============

class IsAdmin(Filter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    
    async def __call__(self, message: Message) -> bool:
        return message.from_user.id == settings.ADMIN_CHAT_ID


class IsAdminCallback(Filter):
    """–§–∏–ª—å—Ç—Ä –¥–ª—è callback query –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    
    async def __call__(self, query: CallbackQuery) -> bool:
        return query.from_user.id == settings.ADMIN_CHAT_ID


# ============= –ö–û–ú–ê–ù–î–´ =============
@router.message(Command("admin"), IsAdmin())
async def cmd_admin(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    text = (
        "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {message.from_user.full_name}\n"
        f"üÜî ID: <code>{message.from_user.id}</code>\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await message.answer(text, parse_mode="HTML", reply_markup=admin_menu_kb())


@router.callback_query(F.data == "admin_menu", IsAdminCallback())
async def cb_admin_menu(query: CallbackQuery):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    text = (
        "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {query.from_user.full_name}\n"
        f"üÜî ID: <code>{query.from_user.id}</code>\n"
        f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await query.message.edit_text(text, parse_mode="HTML", reply_markup=admin_menu_kb())
    await query.answer()


# ============= –°–¢–ê–¢–ò–°–¢–ò–ö–ê =============

@router.message(Command("stats"), IsAdmin())
@router.callback_query(F.data == "admin_stats", IsAdminCallback())
async def show_stats(event, db: DB):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
    is_callback = isinstance(event, CallbackQuery)
    message = event.message if is_callback else event
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        async with db.pool.acquire() as conn:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            total_users = await conn.fetchval("SELECT COUNT(*) FROM users")
            users_today = await conn.fetchval(
                "SELECT COUNT(*) FROM users WHERE created_at >= NOW() - INTERVAL '1 day'"
            )
            users_week = await conn.fetchval(
                "SELECT COUNT(*) FROM users WHERE created_at >= NOW() - INTERVAL '7 days'"
            )
            
            # –¢–æ–≤–∞—Ä—ã
            total_products = await conn.fetchval("SELECT COUNT(*) FROM products")
            products_today = await conn.fetchval(
                "SELECT COUNT(*) FROM products WHERE created_at >= NOW() - INTERVAL '1 day'"
            )
            
            # –¢–∞—Ä–∏—Ñ—ã
            plans_stats = await conn.fetch(
                """SELECT plan, plan_name, COUNT(*) as count 
                   FROM users 
                   GROUP BY plan, plan_name 
                   ORDER BY count DESC"""
            )
            
            # –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω
            history_count = await conn.fetchval("SELECT COUNT(*) FROM price_history")
            history_today = await conn.fetchval(
                "SELECT COUNT(*) FROM price_history WHERE recorded_at >= NOW() - INTERVAL '1 day'"
            )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            
            "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: +{users_today}\n"
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: +{users_week}\n\n"
            
            "üì¶ <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_products}\n"
            f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è: +{products_today}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ —é–∑–µ—Ä–∞: {total_products / total_users if total_users > 0 else 0:.1f}\n\n"
            
            "üí≥ <b>–¢–∞—Ä–∏—Ñ—ã:</b>\n"
        )
        
        for plan in plans_stats:
            percentage = (plan['count'] / total_users * 100) if total_users > 0 else 0
            text += f"‚Ä¢ {plan['plan_name']}: {plan['count']} ({percentage:.1f}%)\n"
        
        text += (
            f"\nüìà <b>–ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {history_count}\n"
            f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: +{history_today}\n\n"
            f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
        )
        
        if is_callback:
            await message.edit_text(text, parse_mode="HTML", reply_markup=back_to_admin_menu_kb())
            await event.answer()
        else:
            await message.answer(text, parse_mode="HTML", reply_markup=back_to_admin_menu_kb())
            
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        
        if is_callback:
            await event.answer(error_text, show_alert=True)
        else:
            await message.answer(error_text)


# ============= –ó–î–û–†–û–í–¨–ï –°–ò–°–¢–ï–ú–´ =============

@router.message(Command("health"), IsAdmin())
@router.callback_query(F.data == "admin_health", IsAdminCallback())
async def show_health(event, db: DB):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã."""
    is_callback = isinstance(event, CallbackQuery)
    message = event.message if is_callback else event
    
    if is_callback:
        await event.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã...")
    else:
        status_msg = await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        monitor = get_health_monitor()
        health_data = await monitor.perform_full_check(db)
        formatted_message = monitor.format_status_message(health_data)
        
        if is_callback:
            await message.edit_text(
                formatted_message,
                parse_mode="HTML",
                reply_markup=back_to_admin_menu_kb()
            )
        else:
            await status_msg.edit_text(
                formatted_message,
                parse_mode="HTML",
                reply_markup=back_to_admin_menu_kb()
            )
            
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}"
        
        if is_callback:
            await event.answer(error_text, show_alert=True)
        else:
            await message.answer(error_text)


# ============= –û–®–ò–ë–ö–ò API =============

@router.message(Command("errors"), IsAdmin())
@router.callback_query(F.data == "admin_errors", IsAdminCallback())
async def show_api_errors(event):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—à–∏–±–æ–∫ API."""
    is_callback = isinstance(event, CallbackQuery)
    message = event.message if is_callback else event
    
    try:
        tracker = get_error_tracker()
        stats = tracker.get_statistics()
        
        status_icon = "‚úÖ" if stats['is_healthy'] else "‚ö†Ô∏è"
        if stats['is_critical']:
            status_icon = "üö®"
        
        text = (
            f"{status_icon} <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API Wildberries</b>\n\n"
            f"‚è± –û–∫–Ω–æ: {stats['window_minutes']:.0f} –º–∏–Ω—É—Ç\n"
            f"üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {stats['total_successes']}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {stats['total_errors']}\n"
            f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: <b>{stats['error_rate_percent']}%</b>\n\n"
        )
        
        if stats['error_breakdown']:
            text += "üìã <b>–¢–∏–ø—ã –æ—à–∏–±–æ–∫:</b>\n"
            for error_type, count in stats['error_breakdown'].items():
                text += f"‚Ä¢ {error_type}: {count}\n"
            text += "\n"
        
        # –°—Ç–∞—Ç—É—Å
        if stats['is_critical']:
            text += "üö® <b>–°—Ç–∞—Ç—É—Å: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô</b>\n"
            text += "–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!"
        elif not stats['is_healthy']:
            text += "‚ö†Ô∏è <b>–°—Ç–∞—Ç—É—Å: –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï</b>\n"
            text += "–ü–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫"
        else:
            text += "‚úÖ <b>–°—Ç–∞—Ç—É—Å: –ó–î–û–†–û–í</b>\n"
            text += "–í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
        
        if is_callback:
            await message.edit_text(
                text,
                parse_mode="HTML",
                reply_markup=back_to_admin_menu_kb()
            )
            await event.answer()
        else:
            await message.answer(
                text,
                parse_mode="HTML",
                reply_markup=back_to_admin_menu_kb()
            )
            
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        
        if is_callback:
            await event.answer(error_text, show_alert=True)
        else:
            await message.answer(error_text)


# ============= –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò =============

@router.callback_query(F.data == "admin_users", IsAdminCallback())
async def show_users_menu(query: CallbackQuery, db: DB):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏."""
    try:
        async with db.pool.acquire() as conn:
            total = await conn.fetchval("SELECT COUNT(*) FROM users")
            recent = await conn.fetch(
                """SELECT id, plan_name, created_at 
                   FROM users 
                   ORDER BY created_at DESC 
                   LIMIT 10"""
            )
        
        text = (
            "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n\n"
            "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
        )
        
        for i, user in enumerate(recent, 1):
            user_id_masked = str(user['id'])[:4] + "****"
            created = user['created_at'].strftime('%d.%m %H:%M')
            text += f"{i}. ID: {user_id_masked} | {user['plan_name']} | {created}\n"
        
        text += "\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /user <id> –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        
        await query.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=back_to_admin_menu_kb()
        )
        await query.answer()
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@router.message(Command("user"), IsAdmin())
async def cmd_user_manage(message: Message, db: DB):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer(
                "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user <id>"
            )
            return
        
        try:
            user_id = int(parts[1])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await db.get_user(user_id)
        
        if not user:
            await message.answer(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        products = await db.list_products(user_id)
        
        text = (
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}</b>\n\n"
            f"üìã –¢–∞—Ä–∏—Ñ: {user.get('plan_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üìä –õ–∏–º–∏—Ç —Ç–æ–≤–∞—Ä–æ–≤: {user.get('max_links', 0)}\n"
            f"üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {len(products)}\n"
            f"üí≥ –°–∫–∏–¥–∫–∞ WB: {user.get('discount_percent', 0)}%\n"
            f"üìç –†–µ–≥–∏–æ–Ω (dest): {user.get('dest', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('created_at', 'N/A')}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        await message.answer(
            text,
            parse_mode="HTML",
            reply_markup=user_management_kb(user_id)
        )
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("admin_change_plan:"), IsAdminCallback())
async def cb_change_plan(query: CallbackQuery):
    """–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = int(query.data.split(":")[1])
    
    text = (
        f"üí≥ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞</b>\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user_id}</code>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ:"
    )
    
    await query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=plan_selection_kb(user_id)
    )
    await query.answer()


@router.callback_query(F.data.startswith("admin_set_plan:"), IsAdminCallback())
async def cb_set_plan(query: CallbackQuery, db: DB):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    try:
        parts = query.data.split(":")
        user_id = int(parts[1])
        plan_key = parts[2]
        max_links = int(parts[3])
        
        plan_names = {
            "plan_free": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π",
            "plan_basic": "–ë–∞–∑–æ–≤—ã–π",
            "plan_pro": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
        }
        
        plan_name = plan_names.get(plan_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        
        await db.set_plan(user_id, plan_key, plan_name, max_links)
        
        await query.answer(
            f"‚úÖ –¢–∞—Ä–∏—Ñ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {plan_name} ({max_links} —Ç–æ–≤–∞—Ä–æ–≤)",
            show_alert=True
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        query.data = f"admin_user_manage:{user_id}"
        await cmd_user_manage(query.message, db)
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–∞—Ä–∏—Ñ–∞: {e}")
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)


# ============= –ü–õ–ê–¢–ï–ñ–ò (–ó–ê–ì–õ–£–®–ö–ò) =============

@router.callback_query(F.data == "admin_payments", IsAdminCallback())
async def show_payments(query: CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π (–∑–∞–≥–ª—É—à–∫–∞)."""
    text = (
        "üí≥ <b>–ü–ª–∞—Ç–µ–∂–∏ –∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        "üöß <b>–ú–æ–¥—É–ª—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
        "–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π\n"
        "‚Ä¢ üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞\n"
        "‚Ä¢ üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ –ø–ª–∞—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã\n"
        "‚Ä¢ üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n"
        "‚Ä¢ üí≥ –í–æ–∑–≤—Ä–∞—Ç—ã –∏ –æ—Ç–º–µ–Ω—ã\n\n"
        "üìÖ –ó–∞–ø—É—Å–∫: Q1 2025"
    )
    
    await query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=back_to_admin_menu_kb()
    )
    await query.answer()


# ============= –†–ê–°–°–´–õ–ö–ê =============

@router.callback_query(F.data == "admin_broadcast", IsAdminCallback())
async def show_broadcast_menu(query: CallbackQuery):
    """–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏."""
    text = (
        "üì® <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π</b>\n\n"
        "üöß <b>–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
        "–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/broadcast –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</code>\n\n"
        "‚ö†Ô∏è –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏!\n"
        "Telegram –º–æ–∂–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∑–∞ —Å–ø–∞–º."
    )
    
    await query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=back_to_admin_menu_kb()
    )
    await query.answer()


# ============= –°–ò–°–¢–ï–ú–ê =============

@router.callback_query(F.data == "admin_system", IsAdminCallback())
async def show_system_info(query: CallbackQuery):
    """–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è."""
    import sys
    import platform
    
    text = (
        "üîß <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        f"üêç Python: {sys.version.split()[0]}\n"
        f"üíª –û–°: {platform.system()} {platform.release()}\n"
        f"üèó –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}\n\n"
        f"üì¶ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 1.0.0\n"
        f"‚è∞ –ó–∞–ø—É—â–µ–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
    )
    
    await query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=back_to_admin_menu_kb()
    )
    await query.answer()


@router.callback_query(F.data == "admin_products", IsAdminCallback())
async def show_products_stats(query: CallbackQuery, db: DB):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–æ–≤–∞—Ä–∞–º."""
    try:
        async with db.pool.acquire() as conn:
            total = await conn.fetchval("SELECT COUNT(*) FROM products")
            out_of_stock = await conn.fetchval(
                "SELECT COUNT(*) FROM products WHERE out_of_stock = true"
            )
            
            # –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—â–∏—Ö
            top_products = await conn.fetch(
                """SELECT nm_id, name_product, COUNT(*) as trackers
                   FROM products
                   GROUP BY nm_id, name_product
                   ORDER BY trackers DESC
                   LIMIT 5"""
            )
        
        text = (
            "üì¶ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
            f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {total}\n"
            f"–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏: {out_of_stock}\n\n"
            "<b>–¢–æ–ø-5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:</b>\n"
        )
        
        for i, product in enumerate(top_products, 1):
            name = product['name_product'][:30] + "..." if len(product['name_product']) > 30 else product['name_product']
            text += f"{i}. {name} ({product['trackers']} üë•)\n"
        
        await query.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=back_to_admin_menu_kb()
        )
        await query.answer()
        
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
