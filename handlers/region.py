from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from states.user_states import SetPVZState
from services.db import DB
from services.pvz_finder import get_dest_by_address
from keyboards.kb import reset_pvz_kb, back_to_settings_kb, main_inline_kb
from utils.decorators import require_plan
import logging

router = Router()
logger = logging.getLogger(__name__)


@router.callback_query(F.data == "set_pvz")
@require_plan(['plan_basic', 'plan_pro'], "‚õî –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ü–í–ó –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–ª–∞—Ç–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–∞—Ö")
async def cb_set_pvz(query: CallbackQuery, state: FSMContext, db: DB):
    """–ù–∞—á–∞–ª–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ü–í–ó —á–µ—Ä–µ–∑ callback."""
    user = await db.get_user(query.from_user.id)

    current_dest = user.get('dest') if user else None
    current_info = ""

    if current_dest and current_dest != -1257786:
        current_info = f"\n\nüìç <b>–¢–µ–∫—É—â–∏–π –ü–í–ó:</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∫–æ–¥: {current_dest})"
    else:
        current_info = "\n\nüìç <b>–¢–µ–∫—É—â–∏–π –ü–í–ó:</b> –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ú–æ—Å–∫–≤–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"

    await query.message.answer(
        "üìç <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–¥—Ä–µ—Å–∞ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –í–∞—à–µ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤ "
        "<b>—Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–ª–∏ –Ω–∞ —Å–∞–π—Ç–µ Wildberries</b>.\n\n"
        "üìù <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ <code>–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, 10</code>\n"
        "‚Ä¢ <code>–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –ù–µ–≤—Å–∫–∏–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 28</code>\n"
        "‚Ä¢ <code>–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, —É–ª. –ú–∏—Ä–∞, 5</code>\n\n"
        "üí° <b>–í–∞–∂–Ω–æ:</b> –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º, "
        "–∫–∞–∫ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –µ–≥–æ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ü–í–ó –Ω–∞ —Å–∞–π—Ç–µ WB."
        f"{current_info}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="HTML"
    )

    await state.set_state(SetPVZState.waiting_for_address)
    await query.answer()


@router.message(SetPVZState.waiting_for_address)
async def process_pvz_address(message: Message, state: FSMContext, db: DB):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ –ü–í–ó."""
    if message.text == "/cancel":
        await message.answer("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ü–í–ó –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=back_to_settings_kb())
        await state.clear()
        return
    
    address = message.text.strip()

    if len(address) < 5:
        await message.answer(
            "‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –ü–í–ó.",
            reply_markup=back_to_settings_kb()
        )
        await state.clear()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
    status_msg = await message.answer(
        "üîÑ <b>–ò—â—É –≤–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏...</b>\n\n"
        "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        parse_mode="HTML"
    )

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Playwright —Å–∫—Ä–∏–ø—Ç
        dest = await get_dest_by_address(address)

        if not dest:
            await status_msg.edit_text(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ê–¥—Ä–µ—Å –≤–≤–µ–¥—ë–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n"
                "‚Ä¢ –ü–í–ó –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ WB\n"
                "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–π—Ç–æ–º WB\n\n"
                "üí° <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>\n"
                "1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥—Ä–µ—Å –Ω–∞ —Å–∞–π—Ç–µ wildberries.ru\n"
                "2. –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É\n"
                "3. –£–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å",
                parse_mode="HTML",
                reply_markup=back_to_settings_kb()
            )
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        await db.ensure_user(message.from_user.id)
        await db.set_pvz(message.from_user.id, dest, address)

        await status_msg.edit_text(
            f"‚úÖ <b>–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"üìç <b>–ê–¥—Ä–µ—Å:</b> {address}\n"
            f"üî¢ <b>–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞:</b> <code>{dest}</code>\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—Å–µ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.",
            parse_mode="HTML",
            reply_markup=back_to_settings_kb()
        )

        logger.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ü–í–ó: "
            f"dest={dest}, address={address}"
        )

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ü–í–ó: {e}")
        await status_msg.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å.",
            parse_mode="HTML",
            reply_markup=back_to_settings_kb()
        )

    data = await state.get_data()
    is_onboarding = data.get("onboarding", False)

    if is_onboarding:
        await message.answer(
            "‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è üëá",
            parse_mode="HTML",
            reply_markup=main_inline_kb()
        )

    await state.clear()


@router.callback_query(F.data == "show_pvz")
async def cb_show_pvz(query: CallbackQuery, db: DB):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ü–í–ó."""
    user = await db.get_user(query.from_user.id)

    if not user:
        await query.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
        return

    dest = user.get("dest")
    pvz_address = user.get("pvz_address")

    from constants import DEFAULT_DEST

    if dest == DEFAULT_DEST or not dest:
        text = (
            f"üìç <b>–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>\n\n"
            f"–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: <b>–ú–æ—Å–∫–≤–∞</b>\n"
            f"–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞: <code>{DEFAULT_DEST}</code>\n\n"
            f"üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à –ü–í–ó, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å —Ç–æ—á–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞."
        )
    else:
        text = (
            f"üìç <b>–í–∞—à –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏</b>\n\n"
            f"–ê–¥—Ä–µ—Å: <b>{pvz_address or '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</b>\n"
            f"–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞: <code>{dest}</code>\n\n"
            f"üí° –¶–µ–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞."
        )

    await query.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=reset_pvz_kb()
    )
    await query.answer()


@router.callback_query(F.data == "reset_pvz")
async def cb_reset_pvz(query: CallbackQuery, db: DB):
    """–°–±—Ä–æ—Å –ü–í–ó –Ω–∞ –ú–æ—Å–∫–≤—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
    from constants import DEFAULT_DEST

    await db.ensure_user(query.from_user.id)
    await db.set_pvz(query.from_user.id, DEFAULT_DEST, None)

    await query.message.edit_text(
        "‚úÖ <b>–ü–í–ó —Å–±—Ä–æ—à–µ–Ω</b>\n\n"
        "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä–µ–≥–∏–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: <b>–ú–æ—Å–∫–≤–∞</b>\n"
        f"–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞: <code>{DEFAULT_DEST}</code>",
        parse_mode="HTML",
        reply_markup=back_to_settings_kb()
    )
    await query.answer("–ü–í–ó —Å–±—Ä–æ—à–µ–Ω –Ω–∞ –ú–æ—Å–∫–≤—É")
