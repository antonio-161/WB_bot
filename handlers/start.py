from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command

from services.db import DB
from keyboards.kb import create_smart_menu, start_kb
from utils.wb_utils import calculate_potential_savings

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message, db: DB):
    """–ù–æ–≤—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥: Value-First –ø–æ–¥—Ö–æ–¥."""

    existing_user = await db.get_user(message.from_user.id)

    # ===== –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω–Ω–æ—Å—Ç—å –°–†–ê–ó–£ =====
    if not existing_user:
        await db.ensure_user(message.from_user.id)

        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ö—É–∫ + –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–º–µ—Ä
        await message.answer(
            "üéØ <b>–ü–µ—Ä–µ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –∑–∞ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ Wildberries?</b>\n\n"
            "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ: –≤—ã —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∫—É—Ä—Ç–∫–æ–π –∑–∞ 8 000‚ÇΩ.\n"
            "–ß–µ—Ä–µ–∑ 3 –¥–Ω—è —Ü–µ–Ω–∞ –ø–∞–¥–∞–µ—Ç –¥–æ 5 200‚ÇΩ.\n"
            "<b>–í—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ 2 800‚ÇΩ –Ω–∞ –æ–¥–Ω–æ–π –ø–æ–∫—É–ø–∫–µ!</b> üí∞\n\n"
            "‚ùå –ë–µ–∑ –±–æ—Ç–∞: –≤—ã —ç—Ç–æ–≥–æ –Ω–µ —É–≤–∏–¥–∏—Ç–µ\n"
            "‚úÖ –° –±–æ—Ç–æ–º: –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –∫—É–ø–∏—Ç–µ –¥–µ—à–µ–≤–ª–µ\n\n"
            "üéÅ <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ë–ï–°–ü–õ–ê–¢–ù–û:</b>\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å üëá",
            parse_mode="HTML",
            reply_markup=start_kb()
        )
        return

    # ===== –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ =====
    plan = existing_user.get("plan_name", "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π")
    products = await db.list_products(message.from_user.id)
    max_links = existing_user.get("max_links", 5)

    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
    if len(products) == 0:
        status = "üéØ –ù–∞—á–Ω–∏—Ç–µ —ç–∫–æ–Ω–æ–º–∏—Ç—å - –¥–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä!"
    elif len(products) < max_links:
        slots_left = max_links - len(products)
        status = f"üì¶ –£ –≤–∞—Å {len(products)} —Ç–æ–≤–∞—Ä(–æ–≤). –û—Å—Ç–∞–ª–æ—Å—å {slots_left} —Å–ª–æ—Ç(–æ–≤)"
    else:
        status = f"‚ö†Ô∏è –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ({max_links}/{max_links})"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∏
    savings_text = await calculate_potential_savings(db, message.from_user.id)

    await message.answer(
        f"üëã <b>–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {message.from_user.first_name}!</b>\n\n"
        f"üìã –¢–∞—Ä–∏—Ñ: <b>{plan}</b>\n"
        f"{status}\n\n"
        f"{savings_text}"
        "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ üëá",
        reply_markup=create_smart_menu(len(products), max_links, plan),
        parse_mode="HTML"
    )
